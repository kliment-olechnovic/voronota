#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'voronota-js-focused-relax-with-openmm' script relaxes interfaces in a protein complex.

Options:
    --input | -i              string  *  input file path
    --output | -o             string  *  output file path
    --focus                   string     focus mode, default is 'whole_structure', others are: 'interface_side_chains', 'whole_interface', 'not_interface'
    --conda-path              string     conda installation path, default is ''
    --conda-env               string     conda environment name, default is ''
    --forcefield              string     forcefield name, default is 'amber99sb', some others are: 'amber14-all', 'charmm36'
    --water-forcefield        string     water forcefiled name, default is '', some others are: 'amber99_obc', 'amber14/tip3pfb', 'charmm36/water'
    --max-iterations          number     max number of iterations, default is 1000
    --score-at-end            string     mode for scoring interface at the end, default is ''. others are: 'fast_iface', 'full_iface', 'full_iface'
    --no-preparation                     flag to not run PDBFixer and to not add hydrogens
    --no-simulation                      flag to not run any simulations
    --print-time                         flag to print time in seconds
    --help | -h                          flag to display help message and exit

Standard output:
    space-separated table of scores for both input and output
    
Examples:

    voronota-js-focused-relax-with-openmm --input model.pdb --output relaxed_model.pdb

EOF
exit 1
}

SECONDS=0
SECONDS_PREPARE=0
SECONDS_SIMULATE=0
SECONDS_SCORE=0

readonly ZEROARG=$0

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [[ $ZEROARG == *"/"* ]]
then
	cd $(dirname $ZEROARG)
	export PATH=$(pwd):$PATH
	cd - &> /dev/null
fi

INFILE=""
OUTFILE=""
FOCUS_MODE="whole_structure"
CONDA_PATH=""
CONDA_ENV=""
FORCEFIELD="amber99sb"
WATER_FORCEFIELD=""
MAX_ITERATIONS="1000"
SCORE_AT_END=""
NO_PREPARATION="false"
NO_SIMULATION="false"
PRINT_TIME="false"
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-i|--input)
		INFILE="$OPTARG"
		shift
		;;
	-o|--output)
		OUTFILE="$OPTARG"
		shift
		;;
	--focus)
		FOCUS_MODE="$OPTARG"
		shift
		;;
	--conda-path)
		CONDA_PATH="$OPTARG"
		shift
		;;
	--conda-env)
		CONDA_ENV="$OPTARG"
		shift
		;;
	--forcefield)
		FORCEFIELD="$OPTARG"
		shift
		;;
	--water-forcefield)
		WATER_FORCEFIELD="$OPTARG"
		shift
		;;
	--max-iterations)
		MAX_ITERATIONS="$OPTARG"
		shift
		;;
	--score-at-end)
		SCORE_AT_END="$OPTARG"
		shift
		;;
	--no-preparation)
		NO_PREPARATION="true"
		;;
	--no-simulation)
		NO_SIMULATION="true"
		;;
	--print-time)
		PRINT_TIME="true"
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

if [ -z "$INFILE" ]
then
	echo >&2 "Error: input file path not provided"
	exit 1
fi

if [ -z "$OUTFILE" ]
then
	echo >&2 "Error: output file path not provided"
	exit 1
fi

if [ ! -s "$INFILE" ]
then
	echo >&2 "Error: input file '$INFILE' does not exist"
	exit 1
fi

if [ "$FOCUS_MODE" != "interface_side_chains" ] && [ "$FOCUS_MODE" != "whole_interface" ] && [ "$FOCUS_MODE" != "not_interface" ] && [ "$FOCUS_MODE" != "whole_structure" ]
then
	echo >&2 "Error: invalid focus mode '$FOCUS_MODE'"
	exit 1
fi

if [ "$FOCUS_MODE" != "whole_structure" ] && [ -n "$WATER_FORCEFIELD" ] && [[ $WATER_FORCEFIELD != *"_obc"* ]]
then
	echo >&2 "Error: focus mode '$FOCUS_MODE' is incompatible with explicit solvent simulations"
	exit 1
fi

if [ "$FOCUS_MODE" != "whole_structure" ]
then
	command -v voronota-js &> /dev/null || { echo >&2 "Error: 'voronota-js' executable not in binaries path"; exit 1; }
fi

if [ "$SCORE_AT_END" != "" ] && [ "$SCORE_AT_END" != "fast_iface" ] && [ "$SCORE_AT_END" != "full_iface" ] && [ "$SCORE_AT_END" != "full" ]
then
	echo >&2 "Error: invalid scoring mode '$SCORE_AT_END'"
	exit 1
fi

if [ "$SCORE_AT_END" == "fast_iface" ]
then
	command -v voronota-js-fast-iface-voromqa &> /dev/null || { echo >&2 "Error: 'voronota-js-fast-iface-voromqa' executable not in binaries path"; exit 1; }
fi

if [ "$SCORE_AT_END" == "full_iface" ] || [ "$SCORE_AT_END" == "full" ]
then
	command -v voronota-js-voromqa &> /dev/null || { echo >&2 "Error: 'voronota-js-voromqa' executable not in binaries path"; exit 1; }
fi

if [ -z "$CONDA_DEFAULT_ENV" ]
then
	if [ -z "$CONDA_PATH" ]
	then
		echo >&2 "Error: not in conda environment, and the conda path is not provided"
		exit 1
	fi
	if [ ! -s "${CONDA_PATH}/bin/activate" ]
	then
		echo >&2 "Error: no conda activation script '${CONDA_PATH}/bin/activate'"
		exit 1
	fi
	source "${CONDA_PATH}/bin/activate"
fi

if [ -n "$CONDA_ENV" ]
then
	if [ "$CONDA_DEFAULT_ENV" != "$CONDA_ENV" ]
	then
		conda activate "$CONDA_ENV"
	fi
	
	if [ "$CONDA_DEFAULT_ENV" != "$CONDA_ENV" ]
	then
		echo >&2 "Error: no '$CONDA_ENV' environment"
		exit 1
	fi
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

cp "$INFILE" "$TMPLDIR/input.pdb"

cd "$TMPLDIR"

if [ "$NO_PREPARATION" == "true" ]
then
	cp "input.pdb" "prepared.pdb"
else
	{
cat << 'EOF'
from simtk.openmm.app import *
from simtk.openmm import *
from simtk.unit import *
from pdbfixer import PDBFixer
fixer = PDBFixer(filename='input.pdb')
fixer.findMissingResidues()
fixer.findNonstandardResidues()
fixer.replaceNonstandardResidues()
fixer.removeHeterogens(keepWater=False)
fixer.findMissingAtoms()
fixer.addMissingAtoms(seed=999)
EOF

if [ -n "$WATER_FORCEFIELD" ] && [[ $WATER_FORCEFIELD != *"_obc"* ]]
then
cat << 'EOF'
maxSize = max(max((pos[i] for pos in fixer.positions))-min((pos[i] for pos in fixer.positions)) for i in range(3))
boxSize = maxSize*Vec3(1, 1, 1)
fixer.addSolvent(boxSize)
EOF
fi

if [ -n "$WATER_FORCEFIELD" ]
then
cat << 'EOF'
forcefield = ForceField('MAIN_FORCEFIELD.xml', 'WATER_FORCEFIELD.xml')
EOF
else
cat << 'EOF'
forcefield = ForceField('MAIN_FORCEFIELD.xml')
EOF
fi

cat << 'EOF'
modeller = Modeller(fixer.topology, fixer.positions)
modeller.addHydrogens(forcefield)
PDBFile.writeFile(modeller.topology, modeller.positions, open('prepared.pdb', 'w'), keepIds=True)
EOF
	} \
	| sed "s|MAIN_FORCEFIELD|${FORCEFIELD}|" \
	| sed "s|WATER_FORCEFIELD|${WATER_FORCEFIELD}|" \
	> prepare.py
	
	python prepare.py
fi

if [ ! -s "prepared.pdb" ]
then
	echo >&2 "Error: failed to prepare input"
	exit 1
fi

SECONDS_PREPARE="$SECONDS"

if [ "$NO_SIMULATION" == "true" ]
then
	cp "prepared.pdb" "relaxed.pdb"
else
	if [ "$FOCUS_MODE" != "whole_structure" ]
	then
		{
cat << 'EOF'
voronota_import("-file", "prepared.pdb", "-include-hydrogens", "-include-heteroatoms");
voronota_assert_partial_success("Failed to import file");

voronota_select_atoms_close_to_interchain_interface("-name", "actii");
voronota_assert_full_success("Failed to select interface atoms");

voronota_set_tag_of_atoms("-use", "[]", "-tag", "whole_structure");
voronota_assert_full_success("Failed to tag atoms");

voronota_set_tag_of_atoms("-use", "[actii]", "-tag", "whole_interface");
voronota_assert_full_success("Failed to tag atoms");

voronota_set_tag_of_atoms("-use", "(not [actii])", "-tag", "not_interface");
voronota_assert_full_success("Failed to tag atoms");

voronota_set_tag_of_atoms("-use", "([actii] and (not [-aname C,N,O,CA]))", "-tag", "interface_side_chains");
voronota_assert_full_success("Failed to tag atoms");

voronota_export_atoms("-file", "annotated.pa");
voronota_assert_full_success("Failed to export annotated atoms");
EOF
		} \
		> annotate.vs
	
		voronota-js --no-setup-defaults < annotate.vs
		
		if [ ! -f "annotated.pa" ]
		then
			echo >&2 "Error: failed to annotate input"
			exit 1
		fi
		
		cat annotated.pa | awk '{print (NR-1) " " $0}' | grep -v "$FOCUS_MODE" | awk '{print "system.setParticleMass(" $1 ", 0.0)"}' > freezing.py
	fi
	
	{
cat << 'EOF'
from simtk.openmm.app import *
from simtk.openmm import *
from simtk.unit import *
pdb = PDBFile('prepared.pdb')
EOF

	if [ -n "$WATER_FORCEFIELD" ]
	then
cat << 'EOF'
forcefield = ForceField('MAIN_FORCEFIELD.xml', 'WATER_FORCEFIELD.xml')
EOF
	else
cat << 'EOF'
forcefield = ForceField('MAIN_FORCEFIELD.xml')
EOF
	fi

cat << 'EOF'
system = forcefield.createSystem(pdb.topology)
EOF

	if [ -s "freezing.py" ]
	then
		cat freezing.py
	fi

cat << 'EOF'
integrator = VerletIntegrator(0.001*picoseconds)
simulation = Simulation(pdb.topology, system, integrator)
simulation.context.setPositions(pdb.positions)
simulation.minimizeEnergy(maxIterations=MAX_ITERATIONS)
positions = simulation.context.getState(getPositions=True).getPositions()
PDBFile.writeFile(simulation.topology, positions, open('relaxed.pdb', 'w'), keepIds=True)
EOF
	} \
	| sed "s|MAIN_FORCEFIELD|${FORCEFIELD}|" \
	| sed "s|WATER_FORCEFIELD|${WATER_FORCEFIELD}|" \
	| sed "s|MAX_ITERATIONS|${MAX_ITERATIONS}|" \
	> relax.py
	
	python relax.py
fi

if [ ! -s "relaxed.pdb" ]
then
	echo >&2 "Error: failed to relax with OpenMM"
	exit 1
fi

SECONDS_SIMULATE="$SECONDS"

if [ "$SCORE_AT_END" == "fast_iface" ]
then
	ls input.pdb relaxed.pdb | voronota-js-fast-iface-voromqa -i _list | column -t
fi

if [ "$SCORE_AT_END" == "full_iface" ]
then
	ls input.pdb relaxed.pdb | voronota-js-voromqa -i _list --inter-chain --processors 2 | column -t
fi

if [ "$SCORE_AT_END" == "full" ]
then
	ls input.pdb relaxed.pdb | voronota-js-voromqa -i _list --processors 2 | column -t
fi

SECONDS_SCORE="$SECONDS"

cd - &> /dev/null

if [ "$OUTFILE" != "/dev/null" ]
then
	mkdir -p "$(dirname "$OUTFILE")"
fi

cat "$TMPLDIR/relaxed.pdb" > "$OUTFILE"

if [ "$PRINT_TIME" == "true" ]
then
	echo "$SECONDS_PREPARE $SECONDS_SIMULATE $SECONDS_SCORE" \
	| awk '{print "seconds:" $1 "+" ($2-$1) "+" ($3-$1) "=" $3}'
fi

exit 0

