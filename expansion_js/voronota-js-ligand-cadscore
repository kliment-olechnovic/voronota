#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'voronota-js-ligand-cadscore' script computes receptor-ligand variation of CAD-score.

Input options, basic:
    --target-receptor             string  *  target receptor file path
    --target-ligands              string  *  list of target ligand file paths
    --target-ligand-ids           string  *  list of target ligand IDs
    --model-receptor              string  *  model receptor file path
    --model-ligands               string  *  list of model ligand file paths
    --model-ligand-ids            string  *  list of model ligand IDs

Input options, alternative:
    --casp15-target               string  *  target data file in CASP15 format, alternative to --target-* options
    --casp15-target-pose          string  *  pose number to select from the target data file in CASP15 format
    --casp15-model                string  *  model data file in CASP15 format, alternative to --model-* options
    --casp15-model-pose           string  *  pose number to select from the model data file in CASP15 format

Other options:
    --help | -h                              flag to display help message and exit
    
Standard output:
    space-separated table of scores
    
Examples:
    voronota-js-ligand-cadscore \
      --target-receptor ./t_protein.pdb --target-ligands './t_ligand1.mol ./t_ligand2.mol ./t_ligand3.mol' --target-ligand-ids 'a a b' \
      --model-receptor ./m_protein.pdb --model-ligands './m_ligand1.mol ./m_ligand2.mol ./m_ligand3.mol' --model-ligand-ids 'a a b'
    
    voronota-js-ligand-cadscore \
      --casp15-target ./T1118v1LG035_1 --casp15-target-pose 1 \
      --casp15-model ./T1118v1LG046_1 --casp15-model-pose 1

EOF
exit 1
}

readonly ZEROARG=$0

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [[ $ZEROARG == *"/"* ]]
then
	cd $(dirname $ZEROARG)
	export PATH=$(pwd):$PATH
	cd - &> /dev/null
fi

command -v voronota-js &> /dev/null || { echo >&2 "Error: 'voronota-js' executable not in binaries path"; exit 1; }

TARGET_RECEPTOR=""
TARGET_LIGANDS=""
TARGET_LIGAND_IDS=""
MODEL_RECEPTOR=""
MODEL_LIGANDS=""
MODEL_LIGAND_IDS=""
CASP15_TARGET=""
CASP15_TARGET_POSE=""
CASP15_MODEL=""
CASP15_MODEL_POSE=""
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--target-receptor)
		TARGET_RECEPTOR="$OPTARG"
		shift
		;;
	--target-ligands)
		TARGET_LIGANDS="$OPTARG"
		shift
		;;
	--target-ligand-ids)
		TARGET_LIGAND_IDS="$OPTARG"
		shift
		;;
	--model-receptor)
		MODEL_RECEPTOR="$OPTARG"
		shift
		;;
	--model-ligands)
		MODEL_LIGANDS="$OPTARG"
		shift
		;;
	--model-ligand-ids)
		MODEL_LIGAND_IDS="$OPTARG"
		shift
		;;
	--casp15-target)
		CASP15_TARGET="$OPTARG"
		shift
		;;
	--casp15-target-pose)
		CASP15_TARGET_POSE="$OPTARG"
		shift
		;;
	--casp15-model)
		CASP15_MODEL="$OPTARG"
		shift
		;;
	--casp15-model-pose)
		CASP15_MODEL_POSE="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

INPUT_MODE=""

if [ -n "$TARGET_RECEPTOR" ] && [ -n "$TARGET_LIGANDS" ] && [ -n "$TARGET_LIGAND_IDS" ] && [ -n "$MODEL_RECEPTOR" ] && [ -n "$MODEL_LIGANDS" ] && [ -n "$MODEL_LIGAND_IDS" ]
then
	INPUT_MODE="basic"
fi

if [ -n "$CASP15_TARGET" ] && [ -n "$CASP15_TARGET_POSE" ] && [ -n "$CASP15_MODEL" ] && [ -n "$CASP15_MODEL_POSE" ]
then
	INPUT_MODE="${INPUT_MODE}alt"
fi

if [ -z "$INPUT_MODE" ]
then
	echo >&2 "Error: incomplete set of input parameters"
	exit 1
fi

if [ "$INPUT_MODE" != "basic" ] && [ "$INPUT_MODE" != "alt" ]
then
	echo >&2 "Error: conflicting set of input parameters, both basic and alternative parameters used"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

if [ "$INPUT_MODE" == "alt" ]
then
	cat "$CASP15_TARGET" | egrep '^ATOM' > "${TMPLDIR}/target_receptor.pdb"
	
	if [ ! -s "${TMPLDIR}/target_receptor.pdb" ]
	then
		echo >&2 "Error: no PDB ATOM records in '${CASP15_TARGET}'"
		exit 1
	fi
	
	cat "$CASP15_MODEL" | egrep '^ATOM' > "${TMPLDIR}/model_receptor.pdb"
	
	if [ ! -s "${TMPLDIR}/model_receptor.pdb" ]
	then
		echo >&2 "Error: no PDB ATOM records in '${CASP15_MODEL}'"
		exit 1
	fi

	mkdir -p "${TMPLDIR}/target_ligands"
	
{
cat << 'EOF'
voronota_split_blocks_file('-input-file', '_INFILE', '-output-file', '_OUTFILE', '-block-start', 'LIGAND', '-block-substart', 'POSE _POSENUM', '-block-end', 'M  END', '-prefix', '_PREFIX', '-postfix', '.mol');
EOF
} \
| sed "s|_INFILE|${CASP15_TARGET}|" \
| sed "s|_OUTFILE|${TMPLDIR}/target_list|" \
| sed "s|_POSENUM|${CASP15_TARGET_POSE}|" \
| sed "s|_PREFIX|${TMPLDIR}/target_ligands/|" \
| voronota-js

	if [ ! -s "${TMPLDIR}/target_list" ]
	then
		echo >&2 "Error: failed to read ligands from '${CASP15_TARGET}' with pose '${CASP15_TARGET_POSE}'"
		exit 1
	fi

	mkdir -p "${TMPLDIR}/model_ligands"
	
{
cat << 'EOF'
voronota_split_blocks_file('-input-file', '_INFILE', '-output-file', '_OUTFILE', '-block-start', 'LIGAND', '-block-substart', 'POSE _POSENUM', '-block-end', 'M  END', '-prefix', '_PREFIX', '-postfix', '.mol');
EOF
} \
| sed "s|_INFILE|${CASP15_MODEL}|" \
| sed "s|_OUTFILE|${TMPLDIR}/model_list|" \
| sed "s|_POSENUM|${CASP15_MODEL_POSE}|" \
| sed "s|_PREFIX|${TMPLDIR}/model_ligands/|" \
| voronota-js

	if [ ! -s "${TMPLDIR}/model_list" ]
	then
		echo >&2 "Error: failed to read ligands from '${CASP15_MODEL}' with pose '${CASP15_MODEL_POSE}'"
		exit 1
	fi
	
	cat "${TMPLDIR}/target_list" | xargs -L 1 basename | sed 's/^.*LIGAND_\+[[:alnum:]]\+_\+\([[:alnum:]]\+\)_.*$/\1/' > "${TMPLDIR}/target_list_ids"
	cat "${TMPLDIR}/model_list" | xargs -L 1 basename | sed 's/^.*LIGAND_\+[[:alnum:]]\+_\+\([[:alnum:]]\+\)_.*$/\1/' > "${TMPLDIR}/model_list_ids"
		
	voronota-js-ligand-cadscore \
	  --target-receptor "${TMPLDIR}/target_receptor.pdb" --target-ligands "$(cat ${TMPLDIR}/target_list)" --target-ligand-ids "$(cat ${TMPLDIR}/target_list_ids)" \
      --model-receptor "${TMPLDIR}/model_receptor.pdb" --model-ligands "$(cat ${TMPLDIR}/model_list)" --model-ligand-ids "$(cat ${TMPLDIR}/model_list_ids)"
	
	exit 0
fi

{
cat << EOF
var params={}
params.target_receptor='$TARGET_RECEPTOR';
params.target_ligands=[];
params.model_receptor='$MODEL_RECEPTOR';
params.model_ligands=[];
EOF

paste <(echo ${TARGET_LIGANDS} | tr ' ' '\n') <(echo ${TARGET_LIGAND_IDS} | tr ' ' '\n') \
| while read LIGFILE LIGID
do
cat << EOF
params.target_ligands.push({"ligand_file": "$LIGFILE", "ligand_id": "$LIGID"});
EOF
done

paste <(echo ${MODEL_LIGANDS} | tr ' ' '\n') <(echo ${MODEL_LIGAND_IDS} | tr ' ' '\n') \
| while read LIGFILE LIGID
do
cat << EOF
params.model_ligands.push({"ligand_file": "$LIGFILE", "ligand_id": "$LIGID"});
EOF
done

cat << 'EOF'
voronota_auto_assert_full_success=true;
voronota_setup_defaults("-no-load-voromqa-potentials -no-load-alt-voromqa-potential -no-load-more-atom-types -no-load-mock-voromqa-potential");

voronota_import('-file', params.target_receptor, '-title', 'target_receptor');
voronota_import('-file', params.model_receptor, '-title', 'model_receptor');
voronota_pick_objects();
voronota_set_tag_of_atoms('-tag', 'receptor');
voronota_unpick_objects();

var target_object_names=['target_receptor'];
for(var i=0;i<params.target_ligands.length;i++)
{
	voronota_import('-file', params.target_ligands[i].ligand_file, '-title', 'tlig'+i);
	var object_name=voronota_last_output().results[0].output.object_name;
	voronota_pick_objects(object_name);
	//voronota_set_adjunct_of_atoms('-name', 'index', '-value', (i+1));
	//voronota_restrict_atoms_and_renumber_residues_by_adjunct('-name', 'index');
	voronota_set_chain_name('-chain-name', 'lig'+params.target_ligands[i].ligand_id);
	voronota_set_tag_of_atoms('-tag', 'ligand');
	voronota_unpick_objects();
	target_object_names.push(object_name);
}

var model_object_names=['model_receptor'];
for(var i=0;i<params.model_ligands.length;i++)
{
	voronota_import('-file', params.model_ligands[i].ligand_file, '-title', 'mlig'+i);
	var object_name=voronota_last_output().results[0].output.object_name;
	voronota_pick_objects(object_name);
	//voronota_set_adjunct_of_atoms('-name', 'index', '-value', (i+1));
	//voronota_restrict_atoms_and_renumber_residues_by_adjunct('-name', 'index');
	voronota_set_chain_name('-chain-name', 'lig'+params.target_ligands[i].ligand_id);
	voronota_set_tag_of_atoms('-tag', 'ligand');
	voronota_unpick_objects();
	model_object_names.push(object_name);
}

voronota_unpick_objects();

voronota_merge_objects('-names', target_object_names, '-title', 'full_target');
voronota_merge_objects('-names', model_object_names, '-title', 'full_model');

voronota_pick_objects('-names', ['full_target', 'full_model']);
voronota_delete_objects('-not-picked');
voronota_set_atom_serials();

voronota_export_atoms('-file', '/tmp/${objectname}.pa')
EOF
} \
| voronota-js --no-setup-defaults

