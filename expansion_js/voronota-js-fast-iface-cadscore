#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'voronota-js-fast-iface-cadscore' script rapidly computes interface CAD-score for two protein complexes.

Options:
    --target | -t             string  *  target file path
    --model | -m              string  *  model file path or '_list' to read file paths from stdin
    --restrict-input          string     query to restrict input atoms, default is '[]'
    --subselect-contacts      string     query to subselect inter-chain contacts, default is '[]'
    --output-table-file       string     output table file path, default is '_stdout' to print to stdout
    --processors              number     maximum number of processors to use, default is 1
    --stdin-file              string     input file path to replace stdin
    --as-assembly                        flag to treat input files as biological assemblies
    --test-common-ids                    flag to fail quickly if there are no common residues
    --detailed-times                     flag to output detailed times
    --help | -h                          flag to display help message and exit

Standard output:
    space-separated table of scores
    
Examples:

    voronota-js-fast-iface-cadscore --input target.pdb --model model.pdb
    
    ls *.pdb | voronota-js-fast-iface-cadscore --input target.pdb --model _list --processors 8 | column -t

EOF
exit 1
}

function cat_stdin
{
	STDIN_SOURCE="$1"
	if [ "$STDIN_SOURCE" == "_stream" ]
	then
		cat
	else
		cat "$STDIN_SOURCE"
	fi
}

readonly ZEROARG=$0
ALLARGS=("$@")

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [[ $ZEROARG == *"/"* ]]
then
	cd $(dirname $ZEROARG)
	export PATH=$(pwd):$PATH
	cd - &> /dev/null
fi

command -v voronota-js &> /dev/null || { echo >&2 "Error: 'voronota-js' executable not in binaries path"; exit 1; }

TARGET_INFILE=""
MODEL_INFILE=""
RESTRICT_INPUT="[]"
SUBSELECT_CONTACTS="[]"
OUTPUT_TABLE_FILE="_stdout"
MAX_PROCESSORS="1"
STDIN_FILE="_stream"
TARGET_INPUT_IS_SCRIPT="false"
MODEL_INPUT_IS_SCRIPT="false"
AS_ASSEMBLY="false"
TEST_COMMON_IDS="false"
DETAILED_TIMES="false"
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-t|--target)
		TARGET_INFILE="$OPTARG"
		shift
		;;
	-m|--model)
		MODEL_INFILE="$OPTARG"
		shift
		;;
	--restrict-input)
		RESTRICT_INPUT="$OPTARG"
		shift
		;;
	--subselect-contacts)
		SUBSELECT_CONTACTS="$OPTARG"
		shift
		;;
	--output-table-file)
		OUTPUT_TABLE_FILE="$OPTARG"
		shift
		;;
	--processors)
		MAX_PROCESSORS="$OPTARG"
		shift
		;;
	--stdin-file)
		STDIN_FILE="$OPTARG"
		shift
		;;
	--target-input-is-script)
		TARGET_INPUT_IS_SCRIPT="true"
		;;
	--model-input-is-script)
		MODEL_INPUT_IS_SCRIPT="true"
		;;
	--as-assembly)
		AS_ASSEMBLY="true"
		;;
	--test-common-ids)
		TEST_COMMON_IDS="true"
		;;
	--detailed-times)
		DETAILED_TIMES="true"
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

if [ -z "$TARGET_INFILE" ]
then
	echo >&2 "Error: target input file not provided"
	exit 1
fi

if [ "$TARGET_INFILE" == "_all_vs_all" ] && [ "$MODEL_INFILE" != "_list" ]
then
	echo >&2 "Error: target parameter '_all_vs_all' supported only if model parameter is '_list'"
	exit 1
fi

if [ "$TARGET_INFILE" == "_all_vs_all" ] && [ "$MODEL_INFILE" == "_list" ]
then
	readonly TMPLDIR=$(mktemp -d)
	trap "rm -r $TMPLDIR" EXIT
	
	cat_stdin "$STDIN_FILE" | egrep . | sort | uniq > "$TMPLDIR/input_list"
	
	if [ ! -s "$TMPLDIR/input_list" ]
	then
		echo >&2 "Error: no stdin data"
		exit 1
	fi
	
	mkdir -p "$TMPLDIR/per_target_tables"
	
	cat "$TMPLDIR/input_list" \
	| awk -v stdin_file="$TMPLDIR/input_list" -v outdir="$TMPLDIR/per_target_tables" '{print "--target " $1 " --model _list --stdin-file " stdin_file " --output-table-file " outdir "/" NR ".txt"}' \
	| xargs -L 1 -P "$MAX_PROCESSORS" "$ZEROARG" "${ALLARGS[@]}" --processors 1
	
	{
		find "$TMPLDIR/per_target_tables" -type f -not -empty | sort | head -1 | xargs -L 1 head -1
		find "$TMPLDIR/per_target_tables" -type f -not -empty | sort | xargs -L 1 tail -n +2 | sort
	} > "$TMPLDIR/all_targets_output_table"
	
	if [ -n "$OUTPUT_TABLE_FILE" ] && [ "$OUTPUT_TABLE_FILE" != "_stdout" ]
	then
		mkdir -p "$(dirname "$OUTPUT_TABLE_FILE")"
		cat "$TMPLDIR/all_targets_output_table" > "$OUTPUT_TABLE_FILE"
	else
		cat "$TMPLDIR/all_targets_output_table"
	fi
	
	exit 0
fi

if [ ! -s "$TARGET_INFILE" ]
then
	echo >&2 "Error: target input file '$MODEL_INFILE' does not exist"
	exit 1
fi

if [ -z "$MODEL_INFILE" ]
then
	echo >&2 "Error: model input file not provided"
	exit 1
fi

if [ "$MODEL_INFILE" != "_list" ] && [ "$MODEL_INFILE" != "_stream" ] && [ ! -s "$MODEL_INFILE" ]
then
	echo >&2 "Error: model input file '$MODEL_INFILE' does not exist"
	exit 1
fi

if [ "$MODEL_INFILE" == "_stream" ]
then
	readonly TMPLDIR=$(mktemp -d)
	trap "rm -r $TMPLDIR" EXIT
	
	cat_stdin "$STDIN_FILE" > "$TMPLDIR/input_stream"
	
	if [ ! -s "$TMPLDIR/input_stream" ]
	then
		echo >&2 "Error: no stdin data"
		exit 1
	fi
	
	"$ZEROARG" "${ALLARGS[@]}" --model "$TMPLDIR/input_stream"
	
	exit 0
fi

if [ "$MODEL_INFILE" == "_list" ] && [ "$MAX_PROCESSORS" -gt "1" ]
then
	readonly TMPLDIR=$(mktemp -d)
	trap "rm -r $TMPLDIR" EXIT
	
	cat_stdin "$STDIN_FILE" | egrep . | sort | uniq > "$TMPLDIR/input_list"
	
	if [ ! -s "$TMPLDIR/input_list" ]
	then
		echo >&2 "Error: no stdin data"
		exit 1
	fi
	
	NUM_OF_INPUTS="$(cat $TMPLDIR/input_list | wc -l)"
	SIZE_OF_PORTION="$(echo "a=$NUM_OF_INPUTS; b=$MAX_PROCESSORS; if(a%b) a/b+1 else a/b" | bc)"
	
	mkdir -p "$TMPLDIR/portions"
	
	split -l "$SIZE_OF_PORTION" "$TMPLDIR/input_list" "$TMPLDIR/portions/portion_"
	
	mkdir -p "$TMPLDIR/children_tables"
	
	find $TMPLDIR/portions/ -type f -not -empty \
	| awk -v outdir="$TMPLDIR/children_tables" '{print "--stdin-file " $1 " --output-table-file " outdir "/" NR ".txt"}' \
	| xargs -L 1 -P "$MAX_PROCESSORS" "$ZEROARG" "${ALLARGS[@]}" --processors 1 --model _list
	
	find "$TMPLDIR/children_tables" -type f -not -empty \
	| sort \
	| xargs -L 1 cat \
	| awk '{if(NR==1 || $1!="target") print $0}' \
	| voronota-js --no-setup-defaults "js:voronota_tournament_sort('-input-file _stdin -output-file _stdout -columns iface_cadscore iface_site_based_cadscore iface_ratio_of_areas -multipliers 1 1 1 -tolerances 0.0 0.0 0.0');" \
	> "$TMPLDIR/full_output_table"
	
	if [ -n "$OUTPUT_TABLE_FILE" ] && [ "$OUTPUT_TABLE_FILE" != "_stdout" ]
	then
		mkdir -p "$(dirname "$OUTPUT_TABLE_FILE")"
		cat "$TMPLDIR/full_output_table" > "$OUTPUT_TABLE_FILE"
	else
		cat "$TMPLDIR/full_output_table"
	fi
	
	exit 0
fi

TARGET_INFILE_BASENAME="$(basename $TARGET_INFILE)"

{
cat << EOF
var common_params={}
common_params.target_input_file='$TARGET_INFILE';
common_params.target_input_file_name='$TARGET_INFILE_BASENAME';
common_params.target_input_is_script='$TARGET_INPUT_IS_SCRIPT';
common_params.model_input_is_script='$MODEL_INPUT_IS_SCRIPT';
common_params.input_as_assembly='$AS_ASSEMBLY';
common_params.restrict_input_atoms='$RESTRICT_INPUT';
common_params.test_common_ids='$TEST_COMMON_IDS';
common_params.contacts_subselection='$SUBSELECT_CONTACTS';
common_params.output_detailed_times='$DETAILED_TIMES';
common_params.output_table_file='$OUTPUT_TABLE_FILE';
var input_info_array=[];
EOF

{
if [ "$MODEL_INFILE" == "_list" ]
then
	cat_stdin "$STDIN_FILE" | egrep . | sort | uniq
else
	echo "$MODEL_INFILE"
fi
} | while read -r SUBINFILE
do
SUBINFILE_BASENAME="$(basename "$SUBINFILE")"
cat << EOF
input_info_array.push({"model_input_file": "$SUBINFILE", "model_input_file_name": "$SUBINFILE_BASENAME"});
EOF
done

cat << 'EOF'
analyze_interface=function(params, input)
{

if(input.model_input_file===undefined || input.model_input_file==="")
{
	throw ("No model input file");
}

voronota_reset_time();

if(params.model_input_is_script=="true")
{
	voronota_source("-file", input.model_input_file);
	voronota_assert_partial_success("Failed when running provided model input script");
}
else
{
	voronota_import("-file", input.model_input_file, "-as-assembly", params.input_as_assembly);
	voronota_assert_partial_success("Failed to import model file");
}

voronota_pick_objects();

voronota_list_objects();
voronota_assert_full_success("Failed to list objects");
list_objects_output=voronota_last_output().results[0].output;
if(list_objects_output.objects.length!=2)
{
	throw ("Not exactly two structures loaded");
}
target_object=list_objects_output.objects[0].name;
model_object=list_objects_output.objects[1].name

voronota_restrict_atoms("-use", params.restrict_input_atoms);
voronota_assert_full_success("Failed to restrict input atoms by the input query");

voronota_restrict_atoms("-use", "([-protein] or [-nucleic])");
voronota_assert_full_success("Failed to restrict input atoms to protein or nucleic only");
result_target_initial_number_of_accepted_atoms=voronota_last_output().results[0].output.atoms_summary_new.number_total;
result_model_initial_number_of_accepted_atoms=voronota_last_output().results[1].output.atoms_summary_new.number_total;

voronota_print_time();
time_loading=voronota_last_output().results[0].output.elapsed_miliseconds;

voronota_reset_time();

voronota_select_atoms_close_to_interchain_interface("-name", "actii");
voronota_assert_full_success("Failed to select interface atoms");

voronota_restrict_atoms("-use", "[actii]");
voronota_assert_full_success("Failed to restrict input atoms to interface atoms");

if(params.test_common_ids=="true")
{
	voronota_export_selection_of_atoms("-on-objects", target_object, "-no-serial", "-no-name", "-file", "_virtual/target_residue_ids");
	voronota_assert_full_success("Failed to export target residue ids");
	voronota_import_selection_of_atoms("-on-objects", model_object, "-file", "_virtual/target_residue_ids", "-name", "common_residues");
	voronota_assert_full_success("No common residue ids");
}

voronota_print_time();
time_restricting=voronota_last_output().results[0].output.elapsed_miliseconds;

voronota_reset_time();

voronota_construct_contacts("-skip-sas -skip-same-chain -no-calculate-volumes -no-tag-peripherial");
voronota_assert_full_success("Failed to construct inter-chain contacts");

voronota_select_contacts("-use", "([-inter-chain] and "+params.contacts_subselection+")", "-name", "inter_chain_contacts");
voronota_assert_full_success("Failed to select inter-chain contacts");

voronota_print_time();
time_constructing_contacts=voronota_last_output().results[0].output.elapsed_miliseconds;

voronota_reset_time();

voronota_cad_score("-target", target_object, "-model", model_object, "-t-sel", "[inter_chain_contacts]", "-also-site-based");
voronota_assert_full_success("Failed to compute CAD-score");
result_cadscore=voronota_last_output().results[0].output.residue_level_result;
result_cadscore_site_based=voronota_last_output().results[0].output.site_residue_level_result;

voronota_print_time();
time_calculating_cadscore=voronota_last_output().results[0].output.elapsed_miliseconds;

voronota_reset_time();

time_total=(time_loading+time_restricting+time_constructing_contacts+time_calculating_cadscore);

summary={}

summary.target=params.target_input_file_name;
summary.model=input.model_input_file_name;

summary.iface_cadscore=result_cadscore.score;
summary.iface_site_based_cadscore=result_cadscore_site_based.score;
summary.iface_ratio_of_areas=result_cadscore.model_target_area_sum/result_cadscore.target_area_sum;
summary.iface_target_area=result_cadscore.target_area_sum;
summary.iface_model_area=result_cadscore.model_target_area_sum;

summary.target_atoms=params.result_target_initial_number_of_accepted_atoms;
summary.model_atoms=result_model_initial_number_of_accepted_atoms;

if(params.output_detailed_times=="true")
{
	summary.time_load=time_loading;
	summary.time_restrict=time_restricting;
	summary.time_contacts=time_constructing_contacts;
	summary.time_cadscore=time_calculating_cadscore;
	summary.time_total=time_total;
}

var summary_table={}
summary_table.model_object=model_object;
summary_table.header="";
summary_table.row="";

Object.keys(summary).forEach(function(key)
{
		summary_table.header+=key+" ";
});

Object.keys(summary).forEach(function(key)
{
	value=summary[key];
	if(typeof value === 'number')
	{
		summary_table.row+=parseFloat(value.toFixed(5))+" ";
	}
	else
	{
		summary_table.row+=value+" ";
	}
});

summary_table.header=summary_table.header.trim();
summary_table.row=summary_table.row.trim();

return summary_table;
}

voronota_setup_defaults("-no-load-voromqa-potentials -no-load-alt-voromqa-potential -no-load-more-atom-types -no-load-mock-voromqa-potential");

if(common_params.target_input_file===undefined || common_params.target_input_file==="")
{
	throw ("No target input file");
}

if(common_params.target_input_is_script===undefined || common_params.target_input_is_script==="")
{
	common_params.target_input_is_script="false";
}

if(common_params.model_input_is_script===undefined || common_params.model_input_is_script==="")
{
	common_params.model_input_is_script="false";
}

if(common_params.input_as_assembly===undefined || common_params.input_as_assembly==="")
{
	params.input_as_assembly="false";
}

if(common_params.restrict_input_atoms===undefined || common_params.restrict_input_atoms==="")
{
	common_params.restrict_input_atoms='[]';
}

if(common_params.test_common_ids===undefined || common_params.test_common_ids==="")
{
	common_params.test_common_ids="false";
}

if(common_params.contacts_subselection===undefined || common_params.contacts_subselection==="")
{
	common_params.contacts_subselection='[]';
}

if(common_params.output_detailed_times===undefined || common_params.output_detailed_times==="")
{
	params.output_detailed_times="false";
}

if(common_params.output_table_file===undefined || common_params.output_table_file==="")
{
	common_params.output_table_file="_stdout";
}

if(common_params.target_input_is_script=="true")
{
	voronota_source("-file", common_params.target_input_file);
	voronota_assert_partial_success("Failed when running provided target input script");
}
else
{
	voronota_import("-file", common_params.target_input_file, "-as-assembly", common_params.input_as_assembly);
	voronota_assert_partial_success("Failed to import target file");
}

voronota_restrict_atoms("-use", common_params.restrict_input_atoms);
voronota_assert_full_success("Failed to restrict input atoms by the input query");

voronota_restrict_atoms("-use", "([-protein] or [-nucleic])");
voronota_assert_full_success("Failed to restrict input atoms to protein or nucleic only");
common_params.result_target_initial_number_of_accepted_atoms=voronota_last_output().results[0].output.atoms_summary_new.number_total;

var full_summary_table="";

for(var i=0;i<input_info_array.length;i++)
{
	var subinput=input_info_array[i];
	var model_object="";
	try
	{
		var summary_table=analyze_interface(common_params, subinput);
		if(full_summary_table=="")
		{
			full_summary_table+=summary_table.header+"\n";
		}
		full_summary_table+=summary_table.row+"\n";
		model_object=summary_table.model_object;
	}
	catch(error)
	{
		log("Failed with '"+subinput.input_file_name+"': "+error);
	}
	
	voronota_delete_objects('-names', model_object);
	voronota_assert_full_success("Failed to delete model object");
}

fwrite('_virtual/summary', full_summary_table);

if(common_params.output_table_file!=="_stdout")
{
	shell('mkdir -p "$(dirname '+common_params.output_table_file+')"');
}

voronota_tournament_sort('-input-file', '_virtual/summary', '-output-file', common_params.output_table_file, '-columns iface_cadscore iface_site_based_cadscore iface_ratio_of_areas -multipliers 1 1 1 -tolerances 0.0 0.0 0.0');

EOF

} \
| voronota-js --no-setup-defaults

