#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'voronota-js-fast-iface-cadscore-matrix' script rapidly computes interface CAD-score between complexes.

Options:
    --restrict-input          string     query to restrict input atoms, default is '[]'
    --subselect-contacts      string     query to subselect inter-chain contacts, default is '[]'
    --output-table-file       string     output table file path, default is '_stdout' to print to stdout
    --stdin-file              string     input file path to replace stdin
    --as-assembly                        flag to treat input files as biological assemblies
    --help | -h                          flag to display help message and exit

Standard output:
    space-separated table of scores
    
Examples:

    ls *.pdb | voronota-js-fast-iface-cadscore-matrix | column -t

EOF
exit 1
}

function cat_stdin
{
	STDIN_SOURCE="$1"
	if [ "$STDIN_SOURCE" == "_stream" ]
	then
		cat
	else
		cat "$STDIN_SOURCE"
	fi
}

readonly ZEROARG=$0
ALLARGS=("$@")

if [[ $ZEROARG == *"/"* ]]
then
	cd $(dirname $ZEROARG)
	export PATH=$(pwd):$PATH
	cd - &> /dev/null
fi

command -v voronota-js &> /dev/null || { echo >&2 "Error: 'voronota-js' executable not in binaries path"; exit 1; }

RESTRICT_INPUT="[]"
SUBSELECT_CONTACTS="[]"
OUTPUT_TABLE_FILE="_stdout"
STDIN_FILE="_stream"
MODEL_INPUT_IS_SCRIPT="false"
AS_ASSEMBLY="false"
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--restrict-input)
		RESTRICT_INPUT="$OPTARG"
		shift
		;;
	--subselect-contacts)
		SUBSELECT_CONTACTS="$OPTARG"
		shift
		;;
	--output-table-file)
		OUTPUT_TABLE_FILE="$OPTARG"
		shift
		;;
	--stdin-file)
		STDIN_FILE="$OPTARG"
		shift
		;;
	--model-input-is-script)
		MODEL_INPUT_IS_SCRIPT="true"
		;;
	--as-assembly)
		AS_ASSEMBLY="true"
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

{
cat << EOF
var common_params={}
common_params.model_input_is_script='$MODEL_INPUT_IS_SCRIPT';
common_params.input_as_assembly='$AS_ASSEMBLY';
common_params.restrict_input_atoms='$RESTRICT_INPUT';
common_params.contacts_subselection='$SUBSELECT_CONTACTS';
common_params.output_table_file='$OUTPUT_TABLE_FILE';
var input_info_array=[];
EOF

cat_stdin "$STDIN_FILE" | egrep . | sort | uniq \
| while read -r SUBINFILE
do
SUBINFILE_BASENAME="$(basename "$SUBINFILE")"
cat << EOF
input_info_array.push({"model_input_file": "$SUBINFILE", "model_input_file_name": "$SUBINFILE_BASENAME"});
EOF
done

cat << 'EOF'
analyze_interface=function(params, target_object, model_object, initial_summary)
{
	voronota_cad_score("-target", target_object, "-model", model_object, "-t-sel", "[inter_chain_contacts]", "-also-site-based");
	voronota_assert_full_success("Failed to compute CAD-score");
	result_cadscore=voronota_last_output().results[0].output.residue_level_result;
	result_cadscore_site_based=voronota_last_output().results[0].output.site_residue_level_result;
	
	summary=initial_summary;
	
	summary.iface_cadscore=result_cadscore.score;
	summary.iface_site_based_cadscore=result_cadscore_site_based.score;
	summary.iface_ratio_of_areas=result_cadscore.model_target_area_sum/result_cadscore.target_area_sum;
	summary.iface_target_area=result_cadscore.target_area_sum;
	summary.iface_model_area=result_cadscore.model_target_area_sum;
	
	var summary_table={}
	summary_table.header="";
	summary_table.row="";
	
	Object.keys(summary).forEach(function(key)
	{
			summary_table.header+=key+" ";
	});
	
	Object.keys(summary).forEach(function(key)
	{
		value=summary[key];
		if(typeof value === 'number')
		{
			summary_table.row+=parseFloat(value.toFixed(5))+" ";
		}
		else
		{
			summary_table.row+=value+" ";
		}
	});
	
	summary_table.header=summary_table.header.trim();
	summary_table.row=summary_table.row.trim();
	
	return summary_table;
}

voronota_setup_defaults("-no-load-voromqa-potentials -no-load-alt-voromqa-potential -no-load-more-atom-types -no-load-mock-voromqa-potential");

if(common_params.model_input_is_script===undefined || common_params.model_input_is_script==="")
{
	common_params.model_input_is_script="false";
}

if(common_params.input_as_assembly===undefined || common_params.input_as_assembly==="")
{
	params.input_as_assembly="false";
}

if(common_params.restrict_input_atoms===undefined || common_params.restrict_input_atoms==="")
{
	common_params.restrict_input_atoms='[]';
}

if(common_params.contacts_subselection===undefined || common_params.contacts_subselection==="")
{
	common_params.contacts_subselection='[]';
}

if(common_params.output_table_file===undefined || common_params.output_table_file==="")
{
	common_params.output_table_file="_stdout";
}

var model_objects_array=[];

for(var i=0;i<input_info_array.length;i++)
{
	var subinput=input_info_array[i];
	var model_object="";
	
	try
	{
		voronota_unpick_objects();
		
		var prev_number_of_objects=0;
		if(i>0)
		{
			voronota_list_objects();
			voronota_assert_full_success("Failed to list objects");
			prev_number_of_objects=voronota_last_output().results[0].output.objects.length;
		}
		
		if(common_params.model_input_is_script=="true")
		{
			voronota_source("-file", subinput.model_input_file);
			voronota_assert_full_success("Failed when running provided model input script");
		}
		else
		{
			voronota_import("-file", subinput.model_input_file, "-as-assembly", common_params.input_as_assembly);
			voronota_assert_full_success("Failed to import model file");
		}
		
		voronota_list_objects();
		voronota_assert_full_success("Failed to list objects");
		var current_number_of_objects=voronota_last_output().results[0].output.objects.length;
		if(current_number_of_objects!=(prev_number_of_objects+1))
		{
			throw ("Not exactly one structure loaded as model from "+subinput.model_input_file);
		}
		model_object=voronota_last_output().results[0].output.objects[current_number_of_objects-1].name;
		
		voronota_pick_objects("-names", model_object);
		
		voronota_restrict_atoms("-use", common_params.restrict_input_atoms);
		voronota_assert_full_success("Failed to restrict input atoms by the input query");
		
		voronota_restrict_atoms("-use", "([-protein] or [-nucleic])");
		voronota_assert_full_success("Failed to restrict input atoms to protein or nucleic only");
		
		voronota_select_atoms_close_to_interchain_interface("-name", "actii");
		voronota_assert_full_success("Failed to select interface atoms");
		
		voronota_restrict_atoms("-use", "[actii]");
		voronota_assert_full_success("Failed to restrict input atoms to interface atoms");
		
		voronota_construct_contacts("-skip-sas -skip-same-chain -no-calculate-volumes -no-tag-peripherial");
		voronota_assert_full_success("Failed to construct inter-chain contacts");
		
		voronota_select_contacts("-use", "([-inter-chain] and "+common_params.contacts_subselection+")", "-name", "inter_chain_contacts");
		voronota_assert_full_success("Failed to select inter-chain contacts");
		
		model_objects_array.push({"model_object": model_object, "model_input_file_name": subinput.model_input_file_name});
	}
	catch(error)
	{
		log("Failed with '"+subinput.model_input_file_name+"': "+error);
		
		if(model_object!="")
		{
			voronota_delete_objects('-names', model_object);
			voronota_assert_full_success("Failed to delete object");
			model_object="";
		}
	}
}

var full_summary_table="";

for(var i=0;i<model_objects_array.length;i++)
{
	for(var j=0;j<model_objects_array.length;j++)
	{
		if(i!=j)
		{
			var initial_summary={};
			initial_summary.target=model_objects_array[i].model_input_file_name;
			initial_summary.model=model_objects_array[j].model_input_file_name;
			var summary_table=analyze_interface(common_params, model_objects_array[i].model_object, model_objects_array[j].model_object, initial_summary);
			if(full_summary_table=="")
			{
				full_summary_table+=summary_table.header+"\n";
			}
			full_summary_table+=summary_table.row+"\n";
		}
	}
}

fwrite('_virtual/summary', full_summary_table);

if(common_params.output_table_file!=="_stdout")
{
	shell('mkdir -p "$(dirname '+common_params.output_table_file+')"');
}

voronota_tournament_sort('-input-file', '_virtual/summary', '-output-file', common_params.output_table_file, '-columns iface_cadscore iface_site_based_cadscore iface_ratio_of_areas -multipliers 1 1 1 -tolerances 0.0 0.0 0.0');

EOF

} \
| voronota-js --no-setup-defaults

