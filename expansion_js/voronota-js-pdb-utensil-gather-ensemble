#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'voronota-js-pdb-utensil-gather-ensemble' script prepares an ensemble of structures in PDB format.

Options:
    --entity-id               string  *  PDB entity ID to start with
    --seq-identity            number  *  sequence identity percents, allowed values are 100, 95, 90 or 70
    --cache-dir               string  *  path to support directory to cache big reference files from PDB
    --output-dir              string  *  path to root output directory to store ensemble info and structures
    --size-condition          number     max allowed number of residues to deviate from maximum size in cluster, default is 80
    --help | -h                          flag to display help message and exit
    
Standard output:
    path to ensemble output directory
    
Examples:
    
    voronota-js-pdb-utensil-gather-ensemble --cache-dir ./cache --entity-id 2XI9_1 --seq-identity 90 --output-dir ./output

EOF
exit 1
}

readonly ZEROARG=$0

if [ -z "$1" ]
then
	print_help_and_exit
fi

if [[ $ZEROARG == *"/"* ]]
then
	cd "$(dirname ${ZEROARG})"
	export PATH="$(pwd):${PATH}"
	cd - &> /dev/null
fi

export LC_ALL=C

command -v voronota-js &> /dev/null || { echo >&2 "Error: 'voronota-js' executable not in binaries path"; exit 1; }
command -v clustalo &> /dev/null || { echo >&2 "Error: 'clustalo' executable not in binaries path"; exit 1; }

ENTITYID=""
SEQIDENTITY=""
CACHEDIR=""
OUTPUTDIR=""
SIZECONDITION="80"
RUNMT="false"
HELP_MODE="false"

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	--entity-id)
		ENTITYID="$OPTARG"
		shift
		;;
	--seq-identity)
		SEQIDENTITY="$OPTARG"
		shift
		;;
	--cache-dir)
		CACHEDIR="$OPTARG"
		shift
		;;
	--output-dir)
		OUTPUTDIR="$OPTARG"
		shift
		;;
	--size-condition)
		SIZECONDITION="$OPTARG"
		shift
		;;
	--run-mt)
		RUNMT="true"
		;;
	-h|--help)
		HELP_MODE="true"
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ "$HELP_MODE" == "true" ]
then
	print_help_and_exit
fi

if [ -z "$ENTITYID" ]
then
	echo >&2 "Error: no entity ID provided"
	exit 1
fi

if [ -z "$SEQIDENTITY" ]
then
	echo >&2 "Error: no sequence identity provided"
	exit 1
fi

if [ -z "$CACHEDIR" ]
then
	echo >&2 "Error: no cache directory provided"
	exit 1
fi

if [ -z "$OUTPUTDIR" ]
then
	echo >&2 "Error: no output directory provided"
	exit 1
fi

if [ -z "$SIZECONDITION" ]
then
	echo >&2 "Error: no size condition provided"
	exit 1
fi

ENTITYID="$(echo ${ENTITYID} | tr '[:lower:]' '[:upper:]')"

if [[ ! $ENTITYID =~ ^[0-9][A-Z0-9]{3}_[0-9]+$ ]]
then
	echo >&2 "Error: invalid entity ID, must be '{PDB ID}_{entity number}'"
	exit 1
fi

if [ "$SEQIDENTITY" != "100" ] && [ "$SEQIDENTITY" != "95" ] && [ "$SEQIDENTITY" != "90" ] && [ "$SEQIDENTITY" != "70" ] && [ "$SEQIDENTITY" != "50" ] && [ "$SEQIDENTITY" != "30" ]
then
	echo >&2 "Error: invalid sequence identity, must be 100, 95, 90 or 70"
	exit 1
fi

if [ "$SIZECONDITION" -gt "0" ]
then
	true 
else
	echo >&2 "Error: invalid size condition, must be greater than 0"
	exit 1
fi

mkdir -p "$CACHEDIR"

if [ ! -d "$CACHEDIR" ]
then
	echo >&2 "Error: could not create cache directory '${CACHEDIR}'"
	exit 1
fi

cd "$CACHEDIR"
CACHEDIR="$(pwd)"
cd - &> /dev/null

CLUSTERSFILE="${CACHEDIR}/clusters-by-entity-${SEQIDENTITY}-$(date '+%Y-%m-%d').txt"

echo >&2 "... Preparing the sequence-based clustering info"

echo >&2 "...... Checking for clusters file '${CLUSTERSFILE}'"

if [ ! -s "$CLUSTERSFILE" ]
then
	CLUSTERSURL="https://cdn.rcsb.org/resources/sequence/clusters/clusters-by-entity-${SEQIDENTITY}.txt"
	
	echo >&2 "...... Downloading clusters file from '${CLUSTERSURL}'"
	
	curl -s "$CLUSTERSURL" > "$CLUSTERSFILE"
	
	if [ ! -s "$CLUSTERSFILE" ]
	then
		echo >&2 "Error: could not download clusters file from '${CLUSTERSURL}'"
		exit 1
	fi
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

echo >&2 "...... Getting a cluster of entities that contains entity '${ENTITYID}'"

cat "$CLUSTERSFILE" | egrep "^${ENTITYID}|\s${ENTITYID}" | head -1 | sed 's/\s\+/\n/g' | egrep '\S+' \
| while read -r ANENTITYID
do
	if [[ $ANENTITYID =~ ^[0-9][A-Z0-9]{3}_[0-9]+$ ]]
	then
		echo "$ANENTITYID"
	fi
done \
| sort > "${TMPLDIR}/entities"

if [ ! -s "${TMPLDIR}/entities" ]
then
	echo >&2 "Error: no cluster found for entity '${ENTITYID}'"
	exit 1
fi

NUMOFENTITIES="$(cat ${TMPLDIR}/entities | wc -l)"

LISTOFENTITIES="$(cat ${TMPLDIR}/entities | tr '\n' ',' | sed 's/,$//')"

RAW_JOBID="$(cat ${TMPLDIR}/entities | head -1)__$(cat ${TMPLDIR}/entities | tail -1)__raw__$(echo ${LISTOFENTITIES} | sha256sum | awk '{print $1}')"

RAW_OUTPUTDIR="${OUTPUTDIR}/${RAW_JOBID}"

echo >&2 "... Preparing the raw structural data"

echo >&2 "...... Checking if the raw structural data is already prepared"

### {
if [ -f "${RAW_OUTPUTDIR}/finished" ]
then
	echo >&2 "...... Skipping the raw structural data preparation"
else

echo >&2 "...... Downloading sequences of entities from 'https://www.rcsb.org/fasta/entity/' to 'sequences.fasta'"

curl -s "https://www.rcsb.org/fasta/entity/${LISTOFENTITIES}/download" > "${TMPLDIR}/sequences.fasta"

if [ ! -s "${TMPLDIR}/sequences.fasta" ]
then
	echo >&2 "Error: could not download sequences of entities ${LISTOFENTITIES}"
	exit 1
fi

if [ "$NUMOFENTITIES" -gt "1" ]
then
	echo >&2 "...... Generating MSA using Clustal Omega and saving it to 'msa.fasta'"

	clustalo -i "${TMPLDIR}/sequences.fasta" --wrap 9999999 > "${TMPLDIR}/msa.fasta"
	
	if [ ! -s "${TMPLDIR}/msa.fasta" ]
	then
		echo >&2 "Error: failed to generate MSA with clustalo"
		exit 1
	fi
else
	echo >&2 "...... No MSA needed, moving 'sequences.fasta' to 'msa.fasta'"
	
	cp "${TMPLDIR}/sequences.fasta" "${TMPLDIR}/msa.fasta"
fi

mkdir -p "$RAW_OUTPUTDIR"

if [ ! -d "$RAW_OUTPUTDIR" ]
then
	echo >&2 "Error: could not create output directory '${RAW_OUTPUTDIR}'"
	exit 1
fi

mv "${TMPLDIR}/entities" "${TMPLDIR}/sequences.fasta" "${TMPLDIR}/msa.fasta" "${RAW_OUTPUTDIR}/"

cd "$RAW_OUTPUTDIR"

RAW_OUTPUTDIR="$(pwd)"

echo >&2 "...... Writing a table of PDB IDs, entity chain IDs and sequences to 'pdbid_chain_sequence_table.tsv'"

cat "./entities" \
| while read -r EID
do
	paste -d '\t' \
	  <(cat "./msa.fasta" | egrep "^>${EID}" | sed 's/^.\(....\).\+Chai\S\+\s\+\([^|]\+\)|.*$/\1\t\2/' | tr '[' ' ' | tr ']' ' ' | tr ',' ' ' | awk '{print $1 "\t" $2}') \
	  <(cat "./msa.fasta" | egrep "^>${EID}" -A 1 | tail -1)
done \
> "./pdbid_chain_sequence_table.tsv"

mkdir -p "./struct_to_seq_alignments"
mkdir -p "./structures"

echo >&2 "...... Fetching structure files from PDB, renumbering the entity chains by sequences, saving structures"

cat "./pdbid_chain_sequence_table.tsv" \
| while read -r PDBID CHAINID MSASEQ
do
{
cat << EOF
var params={}
params.pdb_id='$PDBID';
params.chain_id='$CHAINID';
params.sequence_str='$MSASEQ';
params.strict='true';
EOF

cat << 'EOF'
voronota_setup_defaults("-no-load-voromqa-potentials", "-no-load-more-atom-types", "-no-load-mock-voromqa-potential -include-heteroatoms");
voronota_assert_full_success("Failed to setup defaults");

voronota_fetch_mmcif("-pdb-id", params.pdb_id, "-assembly", 0, "-all-states", "-use-label-ids");
voronota_assert_full_success("Failed to fetch structure");

voronota_restrict_atoms("-use", "[-protein]");
voronota_assert_full_success("Failed to restrict atoms to protein polymer residues");

var selection="[-chain "+params.chain_id+"]";

voronota_restrict_atoms("-use", selection);
voronota_assert_full_success("Failed to restrict atoms by chain ID");

var alignment_file="./struct_to_seq_alignments/${objectname}_"+params.chain_id;

voronota_set_chain_residue_numbers_by_sequence("-use "+selection+" -sequence-string '"+params.sequence_str+"' -keep-dashes -alignment-file '"+alignment_file+"' -only-equal-pairs "+params.strict);
voronota_assert_full_success("Failed to align sequences and renumber");

voronota_export_atoms_to_mmcif("-file", "./structures/${objectname}_"+params.chain_id+".cif");
voronota_assert_full_success("Failed to output structure");
EOF

} \
| voronota-js --no-setup-defaults

done

echo >&2 "...... Writing table with structure-to-sequence alignments to 'structure_sequence_table.tsv'"

find ./struct_to_seq_alignments/ -type f | sort \
| while read -r AFILE
do
	echo "$(basename ${AFILE})" "$(tail -1 ${AFILE})" "$(tail -1 ${AFILE} | tr -d '\n' | tr -d '-' | wc -c)"
done \
| awk '{print $1 "\t" $2 "\t" $3}' \
> "./structure_sequence_table.tsv"

MAXSTRUCTURELENGTH="$(cat ./structure_sequence_table.tsv | awk 'NR == 1 || $3 > max { max = $3 } END { print max }')"

cat ./structure_sequence_table.tsv \
| awk -v maxlength="${MAXSTRUCTURELENGTH}" '{print $1 "\t" $2 "\t" $3 "\t" (maxlength-$3)}' \
| sort -n -k4,4 \
> "./structure_sequence_table_more.tsv"

mv "./structure_sequence_table_more.tsv" "./structure_sequence_table.tsv"

rm -r "./struct_to_seq_alignments"

echo >&2 "...... Creating the cluster raw processing finish file 'finished'"

echo "yes" > "./finished"

fi
### }

cd "$RAW_OUTPUTDIR"

RAW_OUTPUTDIR="$(pwd)"

REDUCED_JOBID="$(echo ${RAW_JOBID} | sed 's|__raw__.*$|__reduced_|')_$(cat ./structure_sequence_table.tsv | awk -v maxloss=${SIZECONDITION} '{if($4<=maxloss){print $1}}' | sort | sha256sum | awk '{print $1}')"

cd ../

REDUCED_OUTPUTDIR="$(pwd)/${REDUCED_JOBID}"

echo >&2 "... Preparing the reduced structural data"

echo >&2 "...... Checking if the reduced structural data is already prepared"

### {
if [ -f "${REDUCED_OUTPUTDIR}/finished" ]
then
	echo >&2 "...... Skipping the reduced structural data preparation"
else

mkdir -p "$REDUCED_OUTPUTDIR"

if [ ! -d "$REDUCED_OUTPUTDIR" ]
then
	echo >&2 "Error: could not create output directory '${RAW_OUTPUTDIR}'"
	exit 1
fi

cd "$REDUCED_OUTPUTDIR"

echo >&2 "...... Preparing the length loss-conditioned table of structure sequence info table 'conditioned_structure_sequence_table.tsv'"

cat "${RAW_OUTPUTDIR}/structure_sequence_table.tsv" \
| awk -v maxloss=${SIZECONDITION} '{if($4<=maxloss){print $0}}' \
> "./conditioned_structure_sequence_table.tsv"

echo >&2 "...... Saving unstable residue occurrencies to 'unstable_residue_numbers'"

cat "./conditioned_structure_sequence_table.tsv" \
| awk '{print $2}' | awk 'BEGIN {FS = ""} {for(i=1;i<=NF;i++){if($i=="-"){cols_with_dash[i]=1}}} END {for(col in cols_with_dash){printf col ","}}' \
| tr ',' '\n' \
> "./unstable_residue_numbers"

RESIDUESTOREMOVE="$(cat ./unstable_residue_numbers | tr '\n' ',' | sed 's/,$//')"

mkdir -p "./structures_reduced"
mkdir -p "./sequences_reduced"

echo >&2 "...... Reducing structures to exclude unstable residue numbers, exporting resulting sequences with gaps"

cat "./conditioned_structure_sequence_table.tsv" \
| awk '{print $1}' \
| while read -r STRUCTNAME
do
{
cat << EOF
var params={}
params.raw_data_dir='$RAW_OUTPUTDIR';
params.struct_name='$STRUCTNAME';
params.residues_to_remove='$RESIDUESTOREMOVE';
EOF

cat << 'EOF'
voronota_setup_defaults("-no-load-voromqa-potentials", "-no-load-more-atom-types", "-no-load-mock-voromqa-potential -include-heteroatoms");
voronota_assert_full_success("Failed to setup defaults");

voronota_import_mmcif("-files", params.raw_data_dir+"/structures/"+params.struct_name+".cif");
voronota_assert_full_success("Failed to import structure");

if(params.residues_to_remove)
{
	voronota_restrict_atoms("-use", "(not [-rnum "+params.residues_to_remove+"])");
	voronota_assert_full_success("Failed to restrict atoms to stable residues");
}

voronota_export_atoms_to_mmcif("-file", "./structures_reduced/"+params.struct_name+".cif");
voronota_assert_full_success("Failed to output structure");

voronota_export_sequence("-file", "./sequences_reduced/"+params.struct_name, "-gap-filler", "dash");
voronota_assert_full_success("Failed to output sequence");
EOF

} \
| voronota-js --no-setup-defaults

done

echo >&2 "...... Preparing the reduced structure sequence info table 'structure_reduced_sequence_table.tsv'"

find ./sequences_reduced/ -type f | sort \
| while read -r SFILE
do
	echo "$(basename ${SFILE})" "$(tail -1 ${SFILE})" "$(tail -1 ${SFILE} | tr -d '\n' | tr -d '-' | wc -c)"
done \
| awk '{print $1 "\t" $2 "\t" $3}' \
> "./structure_reduced_sequence_table.tsv"

rm -r "./sequences_reduced"


echo >&2 "...... Preparing the reduced structure MSA file 'structure_reduced_msa.fasta'"

cat "./structure_reduced_sequence_table.tsv" \
| awk '{print ">" $1 "\n" $2}' \
> "./structure_reduced_msa.fasta"

if [ "$(cat ./structure_reduced_sequence_table.tsv | wc -l)" -lt "2" ]
then
	echo >&2 "... Abandoning further operations because there is only one structure"
	echo "yes" > "./finished"
else

echo >&2 "...... Superposing reduced structured using qcprot, saving RMSD info and superposed structures"

mkdir -p "./structures_reduced_superposed"

{
cat << EOF
var input_files_array=[];
EOF

find ./structures_reduced/ -type f | sort \
| while read -r STRUCTFILE
do
STRUCTFILEBASENAME="$(basename ${STRUCTFILE} .cif)"
cat << EOF
input_files_array.push({"path":"$STRUCTFILE", "title":"$STRUCTFILEBASENAME"});
EOF
done

cat << 'EOF'
voronota_setup_defaults("-no-load-voromqa-potentials", "-no-load-more-atom-types", "-no-load-mock-voromqa-potential -include-heteroatoms");
voronota_assert_full_success("Failed to setup defaults");

for(var i=0;i<input_files_array.length;i++)
{
	voronota_import_mmcif("-files", [input_files_array[i].path], "-title", input_files_array[i].title);
	voronota_assert_full_success("Failed to import structure '"+input_files_array[i].path+"'");
}

voronota_pick_objects();

voronota_set_chain_name("-chain-name", "A");
voronota_assert_full_success("Failed to set chain name to 'A'");

voronota_qcprot_many("-target-sel", "[]", "-model-sel", "[]", "-output-rmsd-file", "./rmsd_for_all_pairs", "-all-to-all", "-verify-atom-ids");
voronota_assert_full_success("Failed to compute optimal RMSD using qcprot for all pairs");

var representative_name=voronota_last_output().results[0].output.qcprot_results_summary.min_mean_rmsd_target;

voronota_qcprot_many("-target", representative_name, "-target-sel", "[]", "-model-sel", "[]", "-output-rmsd-file", "./rmsd_for_pairs_with_representive", "-verify-atom-ids");
voronota_assert_full_success("Failed to compute optimal RMSD using qcprot for pairs with representive");

voronota_export_atoms_to_mmcif("-file", "./structures_reduced_superposed/${objectname}");
voronota_assert_full_success("Failed to output structures");

voronota_export_atoms_to_mmcif_multimodel("-file", "./structures_reduced_superposed_multimodel_numbered.cif", "-model-numbers");
voronota_assert_full_success("Failed to output structures to multimodel numbered mmCIF");

voronota_export_atoms_to_mmcif_multimodel("-file", "./structures_reduced_superposed_multimodel_named.cif");
voronota_assert_full_success("Failed to output structures to multimodel named mmCIF");
EOF
} \
| voronota-js --no-setup-defaults

echo "yes" > "./finished"

fi

fi
### }

echo >&2 "... Summarizing output"

echo
echo "Base directories:"
{
echo "$CACHEDIR/ - cache"
echo "$(dirname ${RAW_OUTPUTDIR})/  - output"
} | column -t

echo
echo "Raw structural data files:"
echo "$(basename ${RAW_OUTPUTDIR})/                              -  root raw data directory"
echo "$(basename ${RAW_OUTPUTDIR})/sequences.fasta               -  downloaded sequences"
echo "$(basename ${RAW_OUTPUTDIR})/msa.fasta                     -  MSA from sequences"
echo "$(basename ${RAW_OUTPUTDIR})/structure_sequence_table.tsv  -  summary table"
echo "$(basename ${RAW_OUTPUTDIR})/structures/                   -  directory with renumbered structures"

echo
echo "Reduced structural data files:"
echo "$(basename ${REDUCED_OUTPUTDIR})/                                                       -  root reduced data directory"
echo "$(basename ${REDUCED_OUTPUTDIR})/unstable_residue_numbers                               -  removed unstable residue numbers"
echo "$(basename ${REDUCED_OUTPUTDIR})/structure_reduced_sequence_table.tsv                   -  summary table"
echo "$(basename ${REDUCED_OUTPUTDIR})/structure_reduced_msa.fasta                            -  MSA from sequences of reduced structures"

if [ "$(cat ${REDUCED_OUTPUTDIR}/structure_reduced_sequence_table.tsv | wc -l)" -gt "1" ]
then
echo "$(basename ${REDUCED_OUTPUTDIR})/rmsd_for_all_pairs                                     -  RMSD for all pairs of reduced structures"
echo "$(basename ${REDUCED_OUTPUTDIR})/structures_reduced_superposed/                         -  directory with reduced and superposed structures"
echo "$(basename ${REDUCED_OUTPUTDIR})/structures_reduced_superposed_multimodel_named.cif     -  mmCIF file with string model IDs"
echo "$(basename ${REDUCED_OUTPUTDIR})/structures_reduced_superposed_multimodel_numbered.cif  -  mmCIF file with integer model IDs"
fi

echo

if [ "$RUNMT" == "true" ]
then

if [ "$(cat ${REDUCED_OUTPUTDIR}/structure_reduced_sequence_table.tsv | wc -l)" -lt "2" ]
then
	echo >&2 "... Not applying MT further operations because there is only one structure"
	exit 0
fi

echo >&2 "... Applying MT"

echo >&2 "...... Checking if MT was already applied"

if [ -f "${REDUCED_OUTPUTDIR}/mt/finished" ]
then
	echo >&2 "...... Skipping MT application"
	exit 0
fi

echo >&2 "...... Running MT"

command -v MotionTree &> /dev/null || { echo >&2 "Error: 'MotionTree' executable not in binaries path"; exit 1; }

cd "${REDUCED_OUTPUTDIR}"

mkdir -p "./mt/marked_structures"
cd "./mt"

NDOMAINS=10
for i in 1 2
do
	MotionTree ../structures_reduced_superposed_multimodel_named.cif ../structure_reduced_msa.fasta -s 0 --tree 1 --nDomains "$NDOMAINS" \
	| egrep '^Rigid Block ' \
	| sed 's/^Rigid\sBlock\s\(\S\+\)\s*\:\s*\(\S.\+\)Loss\s\(\S\+\)\s.*$/\2 \3/' \
	| sed 's/\.\.\+//' \
	| sed 's/^A//' \
	| sed 's/ A/,/g' \
	| awk '{print $1 " " $2}' \
	| sort -n -k2,2 -r \
	| awk -v iteration="$i" '{if(iteration==2 || $2>0.0){print substr("ABCDEFGHIJKLMNOPQRSTUVWXYZ",NR,1) " " $1 " " $2}}' \
	> "./mt_domains.txt"
	
	NDOMAINS="$(cat ./mt_domains.txt | wc -l)"
	if [ "$NDOMAINS" -lt "2" ]
	then
		NDOMAINS="2"
	fi
done

echo >&2 "...... Using MT output to generate marked structures"

cd "${REDUCED_OUTPUTDIR}"

{
cat << EOF
var mt_results=[];
EOF

cat "./mt/mt_domains.txt" \
| while read -r DNAME RNUMSEL LOSSVAL
do
cat << EOF
mt_results.push({"dname":"$DNAME", "rnumsel":"$RNUMSEL"});
EOF
done

cat << 'EOF'
voronota_setup_defaults("-no-load-voromqa-potentials", "-no-load-more-atom-types", "-no-load-mock-voromqa-potential -include-heteroatoms");
voronota_assert_full_success("Failed to setup defaults");

voronota_import_mmcif("-files", ["structures_reduced_superposed_multimodel_named.cif"], "-title", "${model}");

voronota_pick_objects();

voronota_set_chain_name("-chain-name", "A");
voronota_assert_full_success("Failed to set chain name");

for(var i=0;i<mt_results.length;i++)
{
	voronota_set_chain_name("-use", "[-rnum "+mt_results[i].rnumsel+"]", "-chain-name", mt_results[i].dname);
	voronota_assert_full_success("Failed to set chain name");
}

voronota_export_atoms("-as-pdb", "-file", "./mt/marked_structures/${objectname}.pdb");
voronota_assert_full_success("Failed to output structures");
EOF
} \
| voronota-js --no-setup-defaults

echo "yes" > "./mt/finished"

fi

exit 0

