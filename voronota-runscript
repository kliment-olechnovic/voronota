#!/bin/bash

function print_help_and_exit
{
cat >&2 << 'EOF'

'voronota-runscript' script provides a way to run a bash script that controls Voronota.

Options:
    --input | -i           string      input script file
    --gui | -g                         flag to run 'voronota-viewer'
    --no-gui | -t                      flag to not run 'voronota-viewer' even if V_GUI is set to true
    --help | -h                        flag to display help message and exit

For example, let there be a script "test.vbash" with the following contents:

    PDBID="$1"
    DIR="$(mktemp -d)"
    trap "rm -r $DIR" EXIT
    cd "$DIR"
    curl "https://files.rcsb.org/download/${PDBID}.pdb1.gz" | zcat > "input.pdb"
    [ -s "input.pdb" ] || { echo "Nothing downloaded."; exit 1; }
    v-do "load -file ${DIR}/input.pdb -as-assembly"
    v-do "construct-contacts"
    v-do "voromqa-global"
    v-do "voromqa-local -contacts [-inter-chain]"

The above script can be run non-interactively:

    voronota-runscript -i test.vbash 2ZSK

or

    cat test.vbash | voronota-runscript 2ZSK

Another way is to start a special bash session:

    bash --init-file /path/to/voronota-runscript

and, inside the session, run the script

    ./test.vbash 2ZSK

EOF
exit 1
}

INFILE=""
PASSARGS=()
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-i|--input)
		INFILE="$OPTARG"
		shift
		;;
	-g|--gui)
		V_GUI=true
		;;
	-t|--no-gui)
		V_GUI=false
		;;
	-h|--help)
		HELP_MODE=true
		;;
	*)
		PASSARGS+=("$OPTION")
		;;
	esac
done

if $HELP_MODE
then
	print_help_and_exit
fi

if [ -z "$INFILE" ] && [ ! -t 0 ]
then
	INFILE="-"
fi

command -v voronota-resources &> /dev/null || { echo >&2 "Error: 'voronota-resources' executable not in binaries path"; exit 1; }
command -v jq &> /dev/null || { echo >&2 "Error: 'jq' executable not in binaries path"; exit 1; }

if [ "$V_GUI" == "true" ]
then
	command -v voronota-viewer &> /dev/null || { echo >&2 "Error: 'voronota-viewer' executable not in binaries path"; exit 1; }
	coproc VORONOTA_PROC { voronota-viewer; }
else
	command -v voronota &> /dev/null || { echo >&2 "Error: 'voronota' executable not in binaries path"; exit 1; }
	coproc VORONOTA_PROC { voronota run-script --interactive --max-unfolding 0; }
fi

if [ -z "$VORONOTA_PROC_PID" ]
then
	echo >&2 "Error: failed to start Voronota"
	exit 1
fi

FD5_OUTPUT="$(true 2>/dev/null >&5; echo $?)"
FD5_INPUT="$(true 2>/dev/null <&5; echo $?)"
FD6_OUTPUT="$(true 2>/dev/null >&6; echo $?)"
FD6_INPUT="$(true 2>/dev/null <&6; echo $?)"

if [ "$FD5_OUTPUT" == "0" ] || [ "$FD5_INPUT" == "0" ]
then
	echo >&2 "Error: file discriptor 5 not free"
	exit 1
fi

if [ "$FD6_OUTPUT" == "0" ] || [ "$FD6_INPUT" == "0" ]
then
	echo >&2 "Error: file discriptor 6 not free"
	exit 1
fi

exec 5<&${VORONOTA_PROC[0]} 6>&${VORONOTA_PROC[1]}

function on_exit_premature
{
	exec 5<&- 6>&-
}

trap on_exit_premature EXIT

FD5_INPUT="$(true 2>/dev/null <&5; echo $?)"
FD6_OUTPUT="$(true 2>/dev/null >&6; echo $?)"

if [ "$FD5_INPUT" != "0" ] || [ "$FD6_OUTPUT" != "0" ]
then
	echo >&2 "Error: failed to init IO file discriptors 5 and 6"
	exit 1
fi

function v-do-raw
{
	unset V_OUT
	unset V_SUCCESS
	unset V_TAIL_OUT
	unset V_TAIL_SUCCESS
	echo "$*" >&6
	read V_OUT <&5
	V_SUCCESS="$(echo "$V_OUT" | jq -c '.script_summary | .commands_successful == .commands_all')"
	V_TAIL_OUT="$(echo "$V_OUT" | jq -c '.commands[-1]')"
	V_TAIL_SUCCESS="$(echo "$V_TAIL_OUT" | jq '.success')"
	echo "$V_OUT"
}

function v-do-silent
{
	v-do-raw "$*" > /dev/null
}

function v-do
{
	v-do-raw "$*" > /dev/null
	echo "$V_OUT" | jq '.'
}

function v-assert-env
{
	if [ "$(v-do "echo" | jq -c '.commands[-1].success')" != "true" ]
	then
		echo >&2 "Error: 'voronota-runscript' environment is not valid"
		exit 1
	fi
}

v-assert-env

readonly V_TMPDIR="$(mktemp -d)"

function on_exit_final
{
	on_exit_premature
	rm -r "$V_TMPDIR"
}

trap on_exit_final EXIT

voronota-resources radii > "$V_TMPDIR/_radii"
voronota-resources voromqa_v1_energy_potential > "$V_TMPDIR/_voromqa_v1_energy_potential"
voronota-resources voromqa_v1_energy_means_and_sds > "$V_TMPDIR/_voromqa_v1_energy_means_and_sds"

v-do-silent "setup-loading --radii-file '$V_TMPDIR/_radii'"
v-do-silent "setup-voromqa --potential '$V_TMPDIR/_voromqa_v1_energy_potential' --means-and-sds '$V_TMPDIR/_voromqa_v1_energy_means_and_sds'"

export V_TMPDIR
export V_GUI

export -f v-do-raw
export -f v-do-silent
export -f v-do
export -f v-assert-env

if [ -n "$INFILE" ]
then
	SCRIPTFILE="$V_TMPDIR/_script.bash"
	
	{
		if [ "$INFILE" == "-" ]
		then
			cat
		fi
		
		if [ -s "$INFILE" ]
		then
			cat "$INFILE"
		fi
	} \
	| egrep -v '^\S*#' \
	> "$SCRIPTFILE"
	
	chmod +x "$SCRIPTFILE"
	$SCRIPTFILE "${PASSARGS[@]}"
fi

