# This file was automatically generated by SWIG (https://www.swig.org).
# Version 4.2.0
#
# Do not make changes to this file unless you know what you are doing - modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _voronotalt_python
else:
    import _voronotalt_python

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "this":
            set(self, name, value)
        elif name == "thisown":
            self.this.own(value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _voronotalt_python.delete_SwigPyIterator

    def value(self):
        return _voronotalt_python.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _voronotalt_python.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _voronotalt_python.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _voronotalt_python.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _voronotalt_python.SwigPyIterator_equal(self, x)

    def copy(self):
        return _voronotalt_python.SwigPyIterator_copy(self)

    def next(self):
        return _voronotalt_python.SwigPyIterator_next(self)

    def __next__(self):
        return _voronotalt_python.SwigPyIterator___next__(self)

    def previous(self):
        return _voronotalt_python.SwigPyIterator_previous(self)

    def advance(self, n):
        return _voronotalt_python.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _voronotalt_python.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _voronotalt_python.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _voronotalt_python.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _voronotalt_python.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _voronotalt_python.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _voronotalt_python.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _voronotalt_python:
_voronotalt_python.SwigPyIterator_swigregister(SwigPyIterator)
class VectorBall(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _voronotalt_python.VectorBall_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _voronotalt_python.VectorBall___nonzero__(self)

    def __bool__(self):
        return _voronotalt_python.VectorBall___bool__(self)

    def __len__(self):
        return _voronotalt_python.VectorBall___len__(self)

    def __getslice__(self, i, j):
        return _voronotalt_python.VectorBall___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _voronotalt_python.VectorBall___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _voronotalt_python.VectorBall___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _voronotalt_python.VectorBall___delitem__(self, *args)

    def __getitem__(self, *args):
        return _voronotalt_python.VectorBall___getitem__(self, *args)

    def __setitem__(self, *args):
        return _voronotalt_python.VectorBall___setitem__(self, *args)

    def pop(self):
        return _voronotalt_python.VectorBall_pop(self)

    def append(self, x):
        return _voronotalt_python.VectorBall_append(self, x)

    def empty(self):
        return _voronotalt_python.VectorBall_empty(self)

    def size(self):
        return _voronotalt_python.VectorBall_size(self)

    def swap(self, v):
        return _voronotalt_python.VectorBall_swap(self, v)

    def begin(self):
        return _voronotalt_python.VectorBall_begin(self)

    def end(self):
        return _voronotalt_python.VectorBall_end(self)

    def rbegin(self):
        return _voronotalt_python.VectorBall_rbegin(self)

    def rend(self):
        return _voronotalt_python.VectorBall_rend(self)

    def clear(self):
        return _voronotalt_python.VectorBall_clear(self)

    def get_allocator(self):
        return _voronotalt_python.VectorBall_get_allocator(self)

    def pop_back(self):
        return _voronotalt_python.VectorBall_pop_back(self)

    def erase(self, *args):
        return _voronotalt_python.VectorBall_erase(self, *args)

    def __init__(self, *args):
        _voronotalt_python.VectorBall_swiginit(self, _voronotalt_python.new_VectorBall(*args))

    def push_back(self, x):
        return _voronotalt_python.VectorBall_push_back(self, x)

    def front(self):
        return _voronotalt_python.VectorBall_front(self)

    def back(self):
        return _voronotalt_python.VectorBall_back(self)

    def assign(self, n, x):
        return _voronotalt_python.VectorBall_assign(self, n, x)

    def resize(self, *args):
        return _voronotalt_python.VectorBall_resize(self, *args)

    def insert(self, *args):
        return _voronotalt_python.VectorBall_insert(self, *args)

    def reserve(self, n):
        return _voronotalt_python.VectorBall_reserve(self, n)

    def capacity(self):
        return _voronotalt_python.VectorBall_capacity(self)
    __swig_destroy__ = _voronotalt_python.delete_VectorBall

# Register VectorBall in _voronotalt_python:
_voronotalt_python.VectorBall_swigregister(VectorBall)
class VectorContacts(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _voronotalt_python.VectorContacts_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _voronotalt_python.VectorContacts___nonzero__(self)

    def __bool__(self):
        return _voronotalt_python.VectorContacts___bool__(self)

    def __len__(self):
        return _voronotalt_python.VectorContacts___len__(self)

    def __getslice__(self, i, j):
        return _voronotalt_python.VectorContacts___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _voronotalt_python.VectorContacts___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _voronotalt_python.VectorContacts___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _voronotalt_python.VectorContacts___delitem__(self, *args)

    def __getitem__(self, *args):
        return _voronotalt_python.VectorContacts___getitem__(self, *args)

    def __setitem__(self, *args):
        return _voronotalt_python.VectorContacts___setitem__(self, *args)

    def pop(self):
        return _voronotalt_python.VectorContacts_pop(self)

    def append(self, x):
        return _voronotalt_python.VectorContacts_append(self, x)

    def empty(self):
        return _voronotalt_python.VectorContacts_empty(self)

    def size(self):
        return _voronotalt_python.VectorContacts_size(self)

    def swap(self, v):
        return _voronotalt_python.VectorContacts_swap(self, v)

    def begin(self):
        return _voronotalt_python.VectorContacts_begin(self)

    def end(self):
        return _voronotalt_python.VectorContacts_end(self)

    def rbegin(self):
        return _voronotalt_python.VectorContacts_rbegin(self)

    def rend(self):
        return _voronotalt_python.VectorContacts_rend(self)

    def clear(self):
        return _voronotalt_python.VectorContacts_clear(self)

    def get_allocator(self):
        return _voronotalt_python.VectorContacts_get_allocator(self)

    def pop_back(self):
        return _voronotalt_python.VectorContacts_pop_back(self)

    def erase(self, *args):
        return _voronotalt_python.VectorContacts_erase(self, *args)

    def __init__(self, *args):
        _voronotalt_python.VectorContacts_swiginit(self, _voronotalt_python.new_VectorContacts(*args))

    def push_back(self, x):
        return _voronotalt_python.VectorContacts_push_back(self, x)

    def front(self):
        return _voronotalt_python.VectorContacts_front(self)

    def back(self):
        return _voronotalt_python.VectorContacts_back(self)

    def assign(self, n, x):
        return _voronotalt_python.VectorContacts_assign(self, n, x)

    def resize(self, *args):
        return _voronotalt_python.VectorContacts_resize(self, *args)

    def insert(self, *args):
        return _voronotalt_python.VectorContacts_insert(self, *args)

    def reserve(self, n):
        return _voronotalt_python.VectorContacts_reserve(self, n)

    def capacity(self):
        return _voronotalt_python.VectorContacts_capacity(self)
    __swig_destroy__ = _voronotalt_python.delete_VectorContacts

# Register VectorContacts in _voronotalt_python:
_voronotalt_python.VectorContacts_swigregister(VectorContacts)
class VectorCell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _voronotalt_python.VectorCell_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _voronotalt_python.VectorCell___nonzero__(self)

    def __bool__(self):
        return _voronotalt_python.VectorCell___bool__(self)

    def __len__(self):
        return _voronotalt_python.VectorCell___len__(self)

    def __getslice__(self, i, j):
        return _voronotalt_python.VectorCell___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _voronotalt_python.VectorCell___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _voronotalt_python.VectorCell___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _voronotalt_python.VectorCell___delitem__(self, *args)

    def __getitem__(self, *args):
        return _voronotalt_python.VectorCell___getitem__(self, *args)

    def __setitem__(self, *args):
        return _voronotalt_python.VectorCell___setitem__(self, *args)

    def pop(self):
        return _voronotalt_python.VectorCell_pop(self)

    def append(self, x):
        return _voronotalt_python.VectorCell_append(self, x)

    def empty(self):
        return _voronotalt_python.VectorCell_empty(self)

    def size(self):
        return _voronotalt_python.VectorCell_size(self)

    def swap(self, v):
        return _voronotalt_python.VectorCell_swap(self, v)

    def begin(self):
        return _voronotalt_python.VectorCell_begin(self)

    def end(self):
        return _voronotalt_python.VectorCell_end(self)

    def rbegin(self):
        return _voronotalt_python.VectorCell_rbegin(self)

    def rend(self):
        return _voronotalt_python.VectorCell_rend(self)

    def clear(self):
        return _voronotalt_python.VectorCell_clear(self)

    def get_allocator(self):
        return _voronotalt_python.VectorCell_get_allocator(self)

    def pop_back(self):
        return _voronotalt_python.VectorCell_pop_back(self)

    def erase(self, *args):
        return _voronotalt_python.VectorCell_erase(self, *args)

    def __init__(self, *args):
        _voronotalt_python.VectorCell_swiginit(self, _voronotalt_python.new_VectorCell(*args))

    def push_back(self, x):
        return _voronotalt_python.VectorCell_push_back(self, x)

    def front(self):
        return _voronotalt_python.VectorCell_front(self)

    def back(self):
        return _voronotalt_python.VectorCell_back(self)

    def assign(self, n, x):
        return _voronotalt_python.VectorCell_assign(self, n, x)

    def resize(self, *args):
        return _voronotalt_python.VectorCell_resize(self, *args)

    def insert(self, *args):
        return _voronotalt_python.VectorCell_insert(self, *args)

    def reserve(self, n):
        return _voronotalt_python.VectorCell_reserve(self, n)

    def capacity(self):
        return _voronotalt_python.VectorCell_capacity(self)
    __swig_destroy__ = _voronotalt_python.delete_VectorCell

# Register VectorCell in _voronotalt_python:
_voronotalt_python.VectorCell_swigregister(VectorCell)
class Ball(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _voronotalt_python.Ball_swiginit(self, _voronotalt_python.new_Ball(*args))
    x = property(_voronotalt_python.Ball_x_get, _voronotalt_python.Ball_x_set)
    y = property(_voronotalt_python.Ball_y_get, _voronotalt_python.Ball_y_set)
    z = property(_voronotalt_python.Ball_z_get, _voronotalt_python.Ball_z_set)
    r = property(_voronotalt_python.Ball_r_get, _voronotalt_python.Ball_r_set)
    __swig_destroy__ = _voronotalt_python.delete_Ball

# Register Ball in _voronotalt_python:
_voronotalt_python.Ball_swigregister(Ball)
class Contact(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _voronotalt_python.Contact_swiginit(self, _voronotalt_python.new_Contact())
    index_a = property(_voronotalt_python.Contact_index_a_get, _voronotalt_python.Contact_index_a_set)
    index_b = property(_voronotalt_python.Contact_index_b_get, _voronotalt_python.Contact_index_b_set)
    area = property(_voronotalt_python.Contact_area_get, _voronotalt_python.Contact_area_set)
    arc_length = property(_voronotalt_python.Contact_arc_length_get, _voronotalt_python.Contact_arc_length_set)
    __swig_destroy__ = _voronotalt_python.delete_Contact

# Register Contact in _voronotalt_python:
_voronotalt_python.Contact_swigregister(Contact)
class Cell(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _voronotalt_python.Cell_swiginit(self, _voronotalt_python.new_Cell())
    sas_area = property(_voronotalt_python.Cell_sas_area_get, _voronotalt_python.Cell_sas_area_set)
    volume = property(_voronotalt_python.Cell_volume_get, _voronotalt_python.Cell_volume_set)
    included = property(_voronotalt_python.Cell_included_get, _voronotalt_python.Cell_included_set)
    __swig_destroy__ = _voronotalt_python.delete_Cell

# Register Cell in _voronotalt_python:
_voronotalt_python.Cell_swigregister(Cell)
class RadicalTessellation(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr
    balls = property(_voronotalt_python.RadicalTessellation_balls_get, _voronotalt_python.RadicalTessellation_balls_set)
    contacts = property(_voronotalt_python.RadicalTessellation_contacts_get, _voronotalt_python.RadicalTessellation_contacts_set)
    cells = property(_voronotalt_python.RadicalTessellation_cells_get, _voronotalt_python.RadicalTessellation_cells_set)
    probe = property(_voronotalt_python.RadicalTessellation_probe_get, _voronotalt_python.RadicalTessellation_probe_set)

    def __init__(self, balls, probe):
        _voronotalt_python.RadicalTessellation_swiginit(self, _voronotalt_python.new_RadicalTessellation(balls, probe))

    def recompute(self, new_probe):
        return _voronotalt_python.RadicalTessellation_recompute(self, new_probe)
    __swig_destroy__ = _voronotalt_python.delete_RadicalTessellation

# Register RadicalTessellation in _voronotalt_python:
_voronotalt_python.RadicalTessellation_swigregister(RadicalTessellation)

