#!/bin/bash

readonly ZEROARG=$0
INFILE=""
OUTFILE_ATOM_SCORES=""
OUTFILE_RESIDUE_SCORES=""
OUTFILE_ATOM_DEPTHS=""
OUTFILE_CAMEO_RESIDUE_SCORES=""
OUTFILE_PLOT=""
OUTFILE_MAP=""
SMOOTHING_WINDOW="5"
ATOMS_QUERY_PARAMETERS=""
CONTACTS_QUERY_PARAMETERS=""
CONTACTS_CACHE_DIRECTORY=""
MULTIPLE_MODELS_CHAINS_OPTION=""
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-i|--input)
		INFILE="$OPTARG"
		shift
		;;
	--output-atom-scores)
		OUTFILE_ATOM_SCORES="$OPTARG"
		shift
		;;
	--output-residue-scores)
		OUTFILE_RESIDUE_SCORES="$OPTARG"
		shift
		;;
	--output-atom-depth-values)
		OUTFILE_ATOM_DEPTHS="$OPTARG"
		shift
		;;
	--output-residue-scores-for-CAMEO)
		OUTFILE_CAMEO_RESIDUE_SCORES="$OPTARG"
		shift
		;;
	--output-residue-scores-plot)
		OUTFILE_PLOT="$OPTARG"
		shift
		;;
	--output-contacts-map-svg)
		OUTFILE_MAP="$OPTARG"
		shift
		;;
	--smoothing-window)
		SMOOTHING_WINDOW="$OPTARG"
		shift
		;;
	--atoms-query)
		ATOMS_QUERY_PARAMETERS="$OPTARG"
		shift
		;;
	--contacts-query)
		CONTACTS_QUERY_PARAMETERS="$OPTARG"
		shift
		;;
	--cache-dir)
		CONTACTS_CACHE_DIRECTORY="$OPTARG"
		shift
		;;
	--multiple-models)
		MULTIPLE_MODELS_CHAINS_OPTION="--multimodel-chains"
		;;
	-h|--help)
		HELP_MODE=true
		;;
	esac
done

if [ -z "$INFILE" ] || $HELP_MODE
then
cat >&2 << EOF

The 'voronota-voromqa' script is an implementation of VoroMQA method using Voronota.

Script parameters:
    --input | -i                   string   *  input structure file in PDB format
    --output-atom-scores           string      file to output atom scores
    --output-residue-scores        string      file to output residue scores
    --output-residue-scores-plot   string      PNG image file for residue scores plot, requires R
    --smoothing-window             number      residue scores smoothing window size
    --atoms-query                  string      atoms query commands to define selection
    --contacts-query               string      contacts query commands to define selection
    --multiple-models                          flag to handle multiple models in PDB file
    --cache-dir                    string      path to cache directory
    --help | -h                                flag to display help message and exit

Script standard output:
    {input file path} {VoroMQA global score} {number of atoms}

EOF
exit 1
fi

if [[ "$ZEROARG" == *"/"* ]]
then
	cd $(dirname $ZEROARG)
	export PATH=$(pwd):$PATH
	cd - &> /dev/null
fi

command -v voronota &> /dev/null || { echo >&2 "Error: 'voronota' executable not in binaries path"; exit 1; }
command -v voronota-resources &> /dev/null || { echo >&2 "Error: 'voronota-resources' executable not in binaries path"; exit 1; }

readonly TMPDIR=$(mktemp -d)
trap "rm -r $TMPDIR" EXIT

INFILE_CONTENTS=$INFILE
if [[ "$INFILE" == *"://"* ]]
then
	INFILE_CONTENTS=$TMPDIR/downloaded_input_file
	curl -s "$INFILE" > $INFILE_CONTENTS
fi

if [ ! -s "$INFILE_CONTENTS" ]
then
	echo >&2 "Error: input file does not exist or is empty"
	exit 1
fi

INFILE_CONTENTS_EXTRACTED=$INFILE_CONTENTS
if [[ "$INFILE" == *".gz" ]]
then
	INFILE_CONTENTS_EXTRACTED=$TMPDIR/extracted_input_file
	zcat $INFILE_CONTENTS > $INFILE_CONTENTS_EXTRACTED
	if [ ! -s "$INFILE_CONTENTS_EXTRACTED" ]
	then
		echo >&2 "Error: could not extract gzipped file"
		exit 1
	fi
fi

cat $INFILE_CONTENTS_EXTRACTED \
| voronota get-balls-from-atoms-file \
  --annotated $MULTIPLE_MODELS_CHAINS_OPTION \
  --radii-file <(voronota-resources radii) \
| voronota query-balls \
  --drop-adjuncts \
  --drop-altloc-indicators \
> $TMPDIR/balls

if [ ! -s "$TMPDIR/balls" ]
then
	echo >&2 "Error: no atoms in input file"
	exit 1
fi

BALLS_MD5=""
if [ -n "$CONTACTS_CACHE_DIRECTORY" ]
then
	BALLS_MD5=$(cat $TMPDIR/balls | md5sum | awk '{print $1}')
	if [ -n "$BALLS_MD5" ] && [ -d "$CONTACTS_CACHE_DIRECTORY/$BALLS_MD5" ] && [ -s "$CONTACTS_CACHE_DIRECTORY/$BALLS_MD5/all_contacts" ] && [ -s "$CONTACTS_CACHE_DIRECTORY/$BALLS_MD5/atom_energies" ] && [ -s "$CONTACTS_CACHE_DIRECTORY/$BALLS_MD5/depth_values" ]
	then
		cp -r $CONTACTS_CACHE_DIRECTORY/$BALLS_MD5 $TMPDIR/foundation
	fi
fi

if [ ! -d "$TMPDIR/foundation" ]
then
	mkdir -p $TMPDIR/foundation
	
	cat $TMPDIR/balls \
	| voronota calculate-contacts \
	  --annotated \
	  --tag-centrality \
	| voronota query-contacts \
	  --match-min-seq-sep 1 \
	| voronota query-contacts \
	  --match-first 'A<C>' \
	  --match-second 'A<N>' \
	  --match-max-seq-sep 1 \
	  --match-max-dist 1.6 \
	  --invert \
	| voronota query-contacts \
	  --match-min-seq-sep 1 \
	  --match-max-seq-sep 1 \
	  --set-tags 'sep1' \
	| voronota query-contacts \
	  --match-min-seq-sep 2 \
	  --no-solvent \
	  --set-tags 'sep2' \
	| tee $TMPDIR/foundation/all_contacts \
	| awk '{print $1 " " $2 " " $5 " " $3}' \
	| tr ';' '_' \
	| tee $TMPDIR/contacts \
	| voronota score-contacts-energy \
	  --potential-file <(voronota-resources energy_potential) \
	  --atom-scores-file $TMPDIR/foundation/atom_energies \
	> /dev/null
	
	cat $TMPDIR/contacts \
	| voronota x-query-contacts-depth-values \
	> $TMPDIR/foundation/depth_values
	
	if [ -n "$CONTACTS_CACHE_DIRECTORY" ] && [ -n "$BALLS_MD5" ]
	then
		mkdir -p $CONTACTS_CACHE_DIRECTORY
		cp -r $TMPDIR/foundation $CONTACTS_CACHE_DIRECTORY/$BALLS_MD5
	fi
fi

cat $TMPDIR/foundation/atom_energies \
| voronota score-contacts-quality \
  --default-mean -0.34 \
  --default-sd 0.19 \
  --means-and-sds-file <(voronota-resources energy_means_and_sds) \
  --external-weights-file $TMPDIR/foundation/depth_values \
  --smoothing-window $SMOOTHING_WINDOW \
  --atom-scores-file $TMPDIR/atom_quality_scores \
  --residue-scores-file $TMPDIR/residue_quality_scores \
> $TMPDIR/global_quality_score

if [ -n "$OUTFILE_ATOM_SCORES" ]
then
	mkdir -p $(dirname $OUTFILE_ATOM_SCORES)
	cp $TMPDIR/atom_quality_scores "$OUTFILE_ATOM_SCORES"
fi

if [ -n "$OUTFILE_RESIDUE_SCORES" ]
then
	mkdir -p $(dirname $OUTFILE_RESIDUE_SCORES)
	cp $TMPDIR/residue_quality_scores "$OUTFILE_RESIDUE_SCORES"
fi

if [ -n "$OUTFILE_ATOM_DEPTHS" ]
then
	mkdir -p $(dirname $OUTFILE_ATOM_DEPTHS)
	cp $TMPDIR/foundation/depth_values "$OUTFILE_ATOM_DEPTHS"
fi

if [ -n "$OUTFILE_CAMEO_RESIDUE_SCORES" ]
then
	mkdir -p $(dirname $OUTFILE_CAMEO_RESIDUE_SCORES)
	cat $TMPDIR/balls \
	| voronota query-balls \
	  --set-external-adjuncts <(awk '{print $1 " " (10*(1-$2))}' $TMPDIR/residue_quality_scores) \
	  --set-external-adjuncts-name rqscore \
	| voronota x-write-balls-to-atoms-file \
	  --pdb-output $OUTFILE_CAMEO_RESIDUE_SCORES \
	  --pdb-output-b-factor rqscore \
	  --pdb-output-template $INFILE_CONTENTS_EXTRACTED \
	> /dev/null
fi

if [ -n "$ATOMS_QUERY_PARAMETERS" ] || [ -n "$CONTACTS_QUERY_PARAMETERS" ]
then
	cat $TMPDIR/balls \
	| voronota query-balls $ATOMS_QUERY_PARAMETERS \
	| awk '{print $1}' \
	> $TMPDIR/selection_by_atoms_query
	
	cat $TMPDIR/foundation/all_contacts \
	| voronota query-contacts $CONTACTS_QUERY_PARAMETERS \
	| awk '{print $1 " " $2}' | tr ' ' '\n' | sort | uniq | grep -v solvent \
	> $TMPDIR/selection_by_contacts_query
	
	join -e EMPTY <(sort $TMPDIR/selection_by_atoms_query) <(sort $TMPDIR/selection_by_contacts_query) \
	| grep -v EMPTY \
	> $TMPDIR/selection_by_queries
	
	join -e EMPTY <(sort $TMPDIR/foundation/depth_values) <(sort $TMPDIR/selection_by_queries) \
	| grep -v EMPTY \
	| awk '{print $1 " " $2}' \
	> $TMPDIR/scoring_domain
	
	join -e EMPTY <(sort $TMPDIR/scoring_domain) <(sort $TMPDIR/atom_quality_scores) \
	| grep -v EMPTY \
	> $TMPDIR/scoring_table
	
	{
	if [ -s "$TMPDIR/scoring_table" ]
	then
		cat $TMPDIR/scoring_table \
		| awk '{sum+=$2;wsum+=($2*$3)} END {print (wsum/sum)}'
	else
		echo "0"
	fi
	} > $TMPDIR/global_quality_score_of_selection
fi

if [ -n "$OUTFILE_PLOT" ]
then
	if command -v R &> /dev/null
	then
	
mkdir -p $(dirname $OUTFILE_PLOT)

cat $TMPDIR/foundation/atom_energies \
| voronota score-contacts-quality \
  --default-mean -0.34 \
  --default-sd 0.19 \
  --means-and-sds-file <(voronota-resources energy_means_and_sds) \
  --external-weights-file $TMPDIR/foundation/depth_values \
  --smoothing-window "0,$SMOOTHING_WINDOW" \
  --residue-scores-file $TMPDIR/residue_quality_scores_for_plot \
> /dev/null

cat $TMPDIR/residue_quality_scores_for_plot \
| voronota x-expand-descriptors \
> $TMPDIR/table_for_plot

R --slave --vanilla --args "$TMPDIR/table_for_plot" "$OUTFILE_PLOT" << 'EOF' &> /dev/null
args=commandArgs(TRUE);
infile=args[1];
outfile=args[2];
t=read.table(infile, header=FALSE, stringsAsFactors=FALSE);
chains=sort(union(t$V1, t$V1));
png(filename=outfile, width=10, height=5*length(chains), units="in", res=200);
par(mfrow=c(length(chains),1));
for(chain in chains)
{
	title=ifelse(chain==".", "VoroMQA local scores for the unnamed chain", paste("VoroMQA local scores for chain ", chain, sep=""));
	st=t[which(t$V1==chain),]; resnums=st$V2; v1=st$V8; v2=st$V9; N=length(v1);
	mask=rep(0, N);
	plot(c(min(resnums),max(resnums)), c(0, 1), type="n", main=title, xlab="Residue number", ylab="Score");
	duplicate=identical(v1, v2);
	thin_color=ifelse(duplicate, rgb(0.0, 0.0, 0.0), rgb(0.7, 0.7, 0.7));
	i=1;
	while(i<N)
	{
		if((resnums[i+1]-resnums[i])<2)
		{
			points(c(resnums[i], resnums[i+1]), c(v1[i], v1[i+1]), type="l", col=thin_color, lwd=1);
			mask[i]=1; mask[i+1]=1;
		}
		i=i+1;
	}
	sel=which(mask==0);
	if(length(sel)>0)
	{
		points(resnums[sel], v1[sel], col=rgb(0.7, 0.7, 0.7), pch=16, cex=0.5);
	}
	if(duplicate==FALSE)
	{
		i=1;
		while(i<N)
		{
			if((resnums[i+1]-resnums[i])<2)
			{
				points(c(resnums[i], resnums[i+1]), c(v2[i], v2[i+1]), type="l", col=rgb(0.0, 0.0, 0.0), lwd=3);
			}
			i=i+1;
		}
		sel=which(mask==0);
		if(length(sel)>0)
		{
			points(resnums[sel], v2[sel], col=rgb(0.0, 0.0, 0.0), pch=16, cex=0.7);
		}
	}
}
dev.off();
EOF

	else
		echo >&2 "Plot was not created because 'R' command was not found."
	fi
fi

if [ -n "$OUTFILE_MAP" ]
then
	mkdir -p $(dirname $OUTFILE_MAP)
	cat $TMPDIR/foundation/all_contacts \
	| voronota query-contacts \
	  --drop-adjuncts \
	  --set-external-means $TMPDIR/atom_quality_scores \
	| voronota query-contacts \
	  --no-solvent \
	  --match-adjuncts em=0:1 \
	| sed 's|em=||' \
	| awk '{print $1 " " $2 " " $3 " " $4 " " $5 " em=" ($3*$6)}' \
	| voronota query-contacts \
	  --inter-residue \
	| sed 's|em=||' \
	| awk '{print $1 " " $2 " " $3 " " $4 " " $5 " em=" ($6/$3)}' \
	| voronota x-plot-contacts \
	  --adjunct-gradient em \
	  --adjunct-gradient-blue 1 \
	  --adjunct-gradient-red 0 \
	  --svg-output $TMPDIR/map.svg \
	> /dev/null
	mv $TMPDIR/map.svg $OUTFILE_MAP
fi

{
echo $INFILE $(cat $TMPDIR/global_quality_score) $(cat $TMPDIR/balls | wc -l)

if [ -s "$TMPDIR/global_quality_score_of_selection" ]
then
	echo 'selection' $(cat $TMPDIR/global_quality_score_of_selection) $(cat $TMPDIR/scoring_table | wc -l)
fi
} \
| tr '\n' ' '
echo
