#!/bin/bash

readonly ZEROARG=$0
INFILE_TARGET_PDB=""
INFILE_MODEL_PDB=""
ATOMS_QUERY_PARAMETERS=""
CONTACTS_QUERY_PARAMETERS=""
OUTFILE_RESIDUE_SCORES=""
SMOOTHING_WINDOW="1"
CONTACTS_CACHE_DIRECTORY=""
MULTIPLE_MODELS_CHAINS_OPTION=""
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-t)
		INFILE_TARGET_PDB="$OPTARG"
		shift
		;;
	-m)
		INFILE_MODEL_PDB="$OPTARG"
		shift
		;;
	-a)
		ATOMS_QUERY_PARAMETERS="$OPTARG"
		shift
		;;
	-c)
		CONTACTS_QUERY_PARAMETERS="$OPTARG"
		shift
		;;
	-r)
		OUTFILE_RESIDUE_SCORES="$OPTARG"
		shift
		;;
	-s)
		SMOOTHING_WINDOW="$OPTARG"
		shift
		;;
	-C)
		CONTACTS_CACHE_DIRECTORY="$OPTARG"
		shift
		;;
	-q)
		MULTIPLE_MODELS_CHAINS_OPTION="--multimodel-chains"
		;;
	-h)
		HELP_MODE=true
		;;
	esac
done

if [ -z "$INFILE_TARGET_PDB" ] || [ -z "$INFILE_MODEL_PDB" ] || $HELP_MODE
then
cat >&2 << EOF
Script parameters:
    -t input_target_file.pdb
    -m input_model_file.pdb
    [-a atoms_query_parameters_string]
    [-c contacts_query_parameters_string]
    [-r output_residue_scores_file]
    [-s residue_scores_smoothing_window_size]
    [-C cache_directory]
EOF
exit 1
fi

if [[ $ZEROARG == *"/"* ]]
then
	cd $(dirname $ZEROARG)
	export PATH=$(pwd):$PATH
	cd - &> /dev/null
fi

command -v voronota &> /dev/null || { echo >&2 "Error: 'voronota' executable not in binaries path"; exit 1; }
command -v voronota-resources &> /dev/null || { echo >&2 "Error: 'voronota-resources' executable not in binaries path"; exit 1; }

if [ ! -s "$INFILE_TARGET_PDB" ]
then
	echo >&2 "Error: input target file does not exist"
	exit 1
fi

if [ ! -s "$INFILE_MODEL_PDB" ]
then
	echo >&2 "Error: input model file does not exist"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

cp $INFILE_TARGET_PDB $TMPLDIR/target
cp $INFILE_MODEL_PDB $TMPLDIR/model

for WORKFILE in $TMPLDIR/target $TMPLDIR/model
do
	cat $WORKFILE \
	| voronota get-balls-from-atoms-file \
	  --annotated $MULTIPLE_MODELS_CHAINS_OPTION \
	  --radii-file <(voronota-resources radii) \
	  --include-heteroatoms \
	| voronota query-balls \
	  --drop-altloc-indicators \
	  --drop-atom-serials \
	| voronota query-balls $ATOMS_QUERY_PARAMETERS \
	> $WORKFILE.balls
	
	if [ ! -s "$WORKFILE.balls" ]
	then
		echo >&2 "Error: no atoms for $(basename $WORKFILE)"
		exit 1
	fi
	
	BALLS_MD5=""
	if [ -n "$CONTACTS_CACHE_DIRECTORY" ]
	then
		BALLS_MD5=$(cat $WORKFILE.balls | md5sum | awk '{print $1}')
		if [ -n "$BALLS_MD5" ] && [ -s "$CONTACTS_CACHE_DIRECTORY/$BALLS_MD5" ]
		then
			cp $CONTACTS_CACHE_DIRECTORY/$BALLS_MD5 $WORKFILE.all_contacts
		fi
	fi

	if [ ! -s "$WORKFILE.all_contacts" ]
	then
		MAIN_CHAIN_ATOMS_DESCRIPTOR="A<CA,C,N,O,OXT>|A<OP3,O3P,P,OP1,O1P,OP2,O2P,O5',O5*,C5',C5*,C4',C4*,C3',C3*,O3',O3*,C2',C2*,O2',O2*,C1',C1*>"
		
		cat $WORKFILE.balls \
		| voronota calculate-contacts \
		  --annotated \
		| voronota query-contacts \
		  --match-min-seq-sep 1 \
		  --no-solvent \
		| voronota query-contacts \
		  --match-first 'A<C>' \
		  --match-second 'A<N>' \
		  --match-max-seq-sep 1 \
		  --match-max-dist 1.6 \
		  --invert \
		| voronota query-contacts \
		  --match-first-not $MAIN_CHAIN_ATOMS_DESCRIPTOR \
		  --match-second-not $MAIN_CHAIN_ATOMS_DESCRIPTOR \
		  --set-tags 'SS' \
		| voronota query-contacts \
		  --match-first $MAIN_CHAIN_ATOMS_DESCRIPTOR \
		  --match-second $MAIN_CHAIN_ATOMS_DESCRIPTOR \
		  --set-tags 'MM' \
		> $WORKFILE.all_contacts
		
		if [ -n "$CONTACTS_CACHE_DIRECTORY" ] && [ -n "$BALLS_MD5" ]
		then
			mkdir -p $CONTACTS_CACHE_DIRECTORY
			cp $WORKFILE.all_contacts $CONTACTS_CACHE_DIRECTORY/$BALLS_MD5
		fi
	fi
	
	cat $WORKFILE.all_contacts \
	| voronota query-contacts $CONTACTS_QUERY_PARAMETERS \
	| awk '{print $1 " " $2 " " $3}' \
	> $WORKFILE.contacts
	
	if [ ! -s "$WORKFILE.contacts" ]
	then
		echo >&2 "Error: no contacts for $(basename $WORKFILE)"
		exit 1
	fi
done

cat $TMPLDIR/model.contacts \
| voronota compare-contacts \
  --target-contacts-file $TMPLDIR/target.contacts \
  --smoothing-window $SMOOTHING_WINDOW \
  --smoothed-scores-file $TMPLDIR/smoothed_residue_cad_scores \
  --depth 0 \
> $TMPLDIR/global_cad_scores

if [ -n "$OUTFILE_RESIDUE_SCORES" ]
then
	mkdir -p $(dirname $OUTFILE_RESIDUE_SCORES)
	cp $TMPLDIR/smoothed_residue_cad_scores "$OUTFILE_RESIDUE_SCORES"
fi

echo $INFILE_TARGET_PDB $INFILE_MODEL_PDB $(cat $TMPLDIR/global_cad_scores | grep 'residue_level_global' | awk '{print $2}')
