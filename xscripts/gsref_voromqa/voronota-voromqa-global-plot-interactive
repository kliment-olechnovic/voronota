#!/bin/bash

function print_help_and_exit
{
cat >&2 << EOF

'voronota-voromqa-global-plot-interactive' script outputs an interactive plot of VoroMQA global scores in the context of statistics derived from the scores of X-ray structures.

Basic options:
    --input | -i                   string   *  input file with one or more VoroMQA output lines
    --output | -o                  string   *  output HTML file
    --D3-js-url | -l               string      URL of D3.js library, default is 'http://d3js.org/d3.v3.min.js'
    --help | -h                                flag to display help message and exit

EOF
exit 1
}

readonly ZEROARG=$0
INFILE=""
OUTFILE=""
D3_LIB_URL="http://d3js.org/d3.v3.min.js"
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-i|--input)
		INFILE="$OPTARG"
		shift
		;;
	-o|--output)
		OUTFILE="$OPTARG"
		shift
		;;
	-l|--D3-js-url)
		D3_LIB_URL="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE=true
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ -z "$INFILE" ] || [ -z "$OUTFILE" ] ||$HELP_MODE
then
	print_help_and_exit
fi

if [ ! -s "$INFILE" ]
then
	echo >&2 "Error: input file '$INFILE' does not exist or is empty"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

cat "$INFILE" \
| awk '{if(length($1)>0 && length($2)>0 && length($3)>0){print $1 " " $2 " " $3}}' \
> "$TMPLDIR/scores"

if [ ! -s "$TMPLDIR/scores" ]
then
	echo >&2 "Error: input file has missing values"
	exit 1
fi

cat "$TMPLDIR/scores" | while read FILENAME SCORE LENGTH
do
	echo "$(basename ${FILENAME}),${SCORE},${LENGTH}"
done \
> "$TMPLDIR/scores.csv"

{
cat << 'EOF'
<!DOCTYPE html>
<meta charset="utf-8">

<head>
	<style>
		body
		{
			font: 14px Arial;
		}
		
		path
		{ 
			stroke: black;
			stroke-width: 2;
			fill: none;
		}
		
		.axis path,
		.axis line
		{
			fill: none;
			stroke: grey;
			stroke-width: 1;
			shape-rendering: crispEdges;
		}
		
		.tooltip
		{
			position: absolute;
			pointer-events: none;
			background-color: yellow;
			padding: 2px;
		}
	</style>
</head>

<body>

<pre id="csvdata1" style="display:none;">
length,quantile05,quantile50,quantile95
50,0.331,0.471,0.560
100,0.364,0.488,0.571
150,0.396,0.505,0.581
200,0.424,0.518,0.590
250,0.444,0.529,0.598
300,0.458,0.536,0.604
350,0.465,0.541,0.608
400,0.470,0.545,0.609
450,0.474,0.547,0.609
500,0.476,0.548,0.607
550,0.479,0.549,0.606
600,0.482,0.550,0.605
650,0.487,0.551,0.604
700,0.491,0.552,0.604
750,0.494,0.553,0.603
800,0.496,0.553,0.602
850,0.496,0.553,0.601
900,0.495,0.552,0.600
950,0.494,0.551,0.599
1000,0.493,0.550,0.598
</pre>

<pre id="csvdata2" style="display:none;">
name,score,length
__SCORES_CSV
</pre>

<script type="text/javascript" src="__D3_LIB">
</script>

<script>
var margin={top: 50, right: 20, bottom: 50, left: 60};
var width=(700-margin.left-margin.right);
var height=(500-margin.top-margin.bottom);

var x=d3.scale.linear().range([0, width]);
var y=d3.scale.linear().range([height, 0]);

var xAxis=d3.svg.axis().scale(x).orient("bottom").ticks(5);
var yAxis=d3.svg.axis().scale(y).orient("left").ticks(5);

var tooltip=d3.select("body")
	.append("div")
	.attr("class", "tooltip")
	.style("opacity", 0);

var svg=d3.select("body")
	.append("svg")
		.attr("width", width + margin.left + margin.right)
		.attr("height", height + margin.top + margin.bottom)
	.append("g")
		.attr("transform", "translate(" + margin.left + "," + margin.top + ")");

var valueline05=d3.svg.line()
	.x(function(d){return x(d.length);})
	.y(function(d){return y(d.quantile05);});
var valueline50=d3.svg.line()
	.x(function(d){return x(d.length);})
	.y(function(d){return y(d.quantile50);});
var valueline95=d3.svg.line()
	.x(function(d){return x(d.length);})
	.y(function(d){return y(d.quantile95);});

data1=d3.csv.parse(d3.select("#csvdata1").text());
data2=d3.csv.parse(d3.select("#csvdata2").text());

x.domain([0, 1000]);
y.domain([0, 1]);

svg.append("g")
	.attr("class", "x axis")
	.attr("transform", "translate(0,"+height+")")
	.call(xAxis);

svg.append("g")
	.attr("class", "y axis")
	.call(yAxis);

svg.append("text")
	.attr("transform", "translate("+(width/2)+" ,"+(height+margin.bottom)+")")
	.style("text-anchor", "middle")
	.text("Number of residues");
	
svg.append("text")
	.attr("transform", "rotate(-90)")
	.attr("y", 0-margin.left)
	.attr("x", 0-(height/2))
	.attr("dy", "1em")
	.style("text-anchor", "middle")
	.text("VoroMQA global score");
	
svg.append("text")
	.attr("x", (width/2))
	.attr("y", 0-(margin.top/2))
	.attr("text-anchor", "middle")
	.style("font-size", "14px")
	.style("font-weight", "bold")
	.text("VoroMQA global scores in the context of high-quality X-ray structure scores");
	
svg.append("text")
	.attr("x", (width/2))
	.attr("y", 50)
	.attr("text-anchor", "middle")
	.style("fill", "blue")
	.text("Best 5%");

svg.append("text")
	.attr("x", (width/2))
	.attr("y", height-50)
	.attr("text-anchor", "middle")
	.style("fill", "red")
	.text("Worst 5%");
	
svg.append("text")
	.attr("x", (width-120))
	.attr("y", 20)
	.attr("text-anchor", "left")
	.text("Quantiles of scores:");
svg.append("text")
	.attr("x", (width-70))
	.attr("y", 20+16)
	.attr("text-anchor", "left")
	.text("best 5%");
svg.append("text")
	.attr("x", (width-70))
	.attr("y", 20+16*2)
	.attr("text-anchor", "left")
	.text("median");
svg.append("text")
	.attr("x", (width-70))
	.attr("y", 20+16*3)
	.attr("text-anchor", "left")
	.text("worst 5%");
	
svg.append("rect")
	.attr("x", (width-100))
	.attr("y", 16+16)
	.attr("width", 25)
	.attr("height", 2)
	.style("fill", "blue")
svg.append("rect")
	.attr("x", (width-100))
	.attr("y", 16+16*2)
	.attr("width", 25)
	.attr("height", 2)
	.style("fill", "gray")
svg.append("rect")
	.attr("x", (width-100))
	.attr("y", 16+16*3)
	.attr("width", 25)
	.attr("height", 2)
	.style("fill", "red")


svg.append("path")
	.attr("class", "line")
	.style("stroke", "red")
	.attr("d", valueline05(data1));
svg.append("path")
	.attr("class", "line")
	.style("stroke", "gray")
	.attr("d", valueline50(data1));
svg.append("path")
	.attr("class", "line")
	.style("stroke", "blue")
	.attr("d", valueline95(data1));

svg.selectAll("dot")
	.data(data2)
	.enter().append("circle")
		.attr("r", 4.0)
		.attr("cx", function(d){return x(d.length);})
		.attr("cy", function(d){return y(d.score);})
		.style("stroke", "black")
		.style("fill", "black")
		.style("fill-opacity", 0)
		.on("mouseover", function(d)
			{
				d3.select(this).transition()
					.duration(200)
					.style("fill-opacity", 0.9);
				tooltip.transition()
					.duration(500)
					.style("opacity", 0);
				tooltip.transition()
					.duration(200)
					.style("opacity", 0.9);
				tooltip.html(""+d.name+" (score="+d.score+", size="+d.length+")")
					.style("left", (d3.event.pageX+10)+"px")
					.style("top", (d3.event.pageY-10)+"px");
			})
		.on("mouseout", function(d)
			{
				d3.select(this).transition()
					.duration(200)
					.style("fill-opacity", 0);
				tooltip.transition()
					.duration(500)
					.style("opacity", 0);
			});
</script>
</body>
EOF
} \
| sed "s|__D3_LIB|$D3_LIB_URL|g" \
| sed -e "/__SCORES_CSV/{r $TMPLDIR/scores.csv" -e "d}" \
> "$OUTFILE"

