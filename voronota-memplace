#!/bin/bash

function print_help_and_exit
{
cat >&2 << EOF

'voronota-memplace' script provides a way for predicting membrane placement
with just one command (without the need to construct a pipeline from 'voronota' calls).

Basic options:
    --input | -i                   string   *  input structure file in PDB format
    --input-filter-query           string      input atoms filtering query parameters
    --width                        number      membrane width, default is 30
    --output-statuses-pdb          string      output PDB file with membrane statuses as B-factors
    --cache-dir                    string      path to cache directory
    --help | -h                                flag to display help message and exit

Advanced options:
    --width-extension              number      membrane width extension, default is 0

Standard output (one line):
    {input file path} {membrane placement score} {position coordinates} {direction coordinates}

EOF
exit 1
}

readonly ZEROARG=$0
INFILE=""
INPUT_FILTER_QUERY_PARAMETERS=""
WIDTH="30"
WIDTH_EXTENSION="0"
OUTPUT_STATUSES_PDB=""
CACHE_DIRECTORY=""
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-i|--input)
		INFILE="$OPTARG"
		shift
		;;
	--input-filter-query)
		INPUT_FILTER_QUERY_PARAMETERS="$OPTARG"
		shift
		;;
	--width)
		WIDTH="$OPTARG"
		shift
		;;
	--width-extension)
		WIDTH_EXTENSION="$OPTARG"
		shift
		;;
	--output-statuses-pdb)
		OUTPUT_STATUSES_PDB="$OPTARG"
		shift
		;;
	--cache-dir)
		CACHE_DIRECTORY="$OPTARG"
		shift
		;;
	-h)
		HELP_MODE=true
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if [ -z "$INFILE" ] || $HELP_MODE
then
	print_help_and_exit
fi

if [[ $ZEROARG == *"/"* ]]
then
	cd $(dirname $ZEROARG)
	export PATH=$(pwd):$PATH
	cd - &> /dev/null
fi

command -v voronota &> /dev/null || { echo >&2 "Error: 'voronota' executable not in binaries path"; exit 1; }
command -v voronota-resources &> /dev/null || { echo >&2 "Error: 'voronota-resources' executable not in binaries path"; exit 1; }
command -v voronota-voromqa &> /dev/null || { echo >&2 "Error: 'voronota-voromqa' executable not in binaries path"; exit 1; }

if [ ! -s "$INFILE" ]
then
	echo >&2 "Error: input file does not exist"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)
trap "rm -r $TMPLDIR" EXIT

{
	if [[ "$INFILE" == *".gz" ]]
	then
		zcat "$INFILE"
	else
		cat "$INFILE"
	fi
} \
| voronota get-balls-from-atoms-file \
  --annotated \
  --multimodel-chains \
  --radii-file <(voronota-resources radii) \
  --include-heteroatoms \
| voronota query-balls \
  --drop-altloc-indicators \
| voronota query-balls $INPUT_FILTER_QUERY_PARAMETERS \
> $TMPLDIR/balls

if [ ! -s "$TMPLDIR/balls" ]
then
	echo >&2 "Error: no atoms in input file"
	exit 1
fi

BALLS_MD5=""
if [ -n "$CACHE_DIRECTORY" ]
then
	BALLS_MD5=$(cat $TMPLDIR/balls | md5sum | awk '{print $1}')
	if [ -n "$BALLS_MD5" ]
	then
		BALLS_MD5="${BALLS_MD5}.voronota.memplace"
		if [ -s "$CACHE_DIRECTORY/$BALLS_MD5" ]
		then
			cp $CACHE_DIRECTORY/$BALLS_MD5 $TMPLDIR/all_mscores
		fi
	fi
fi

if [ ! -s "$TMPLDIR/all_mscores" ]
then
	cat "$TMPLDIR/balls" \
	| voronota write-balls-to-atoms-file \
	  --pdb-output "$TMPLDIR/balls.pdb" \
	> /dev/null
	
	./voronota-voromqa \
	  --multiple-models \
	  --input "$TMPLDIR/balls.pdb" \
	  --surface-craving-atoms-output "$TMPLDIR/all_mscores" \
	> /dev/null

	if [ -n "$CACHE_DIRECTORY" ] && [ -n "$BALLS_MD5" ]
	then
		mkdir -p $CACHE_DIRECTORY
		cp $TMPLDIR/all_mscores $CACHE_DIRECTORY/$BALLS_MD5
	fi
fi

cat "$TMPLDIR/balls" \
| ./voronota x-place-membrane \
  --membrane-width "$WIDTH" \
  --membrane-width-extension "$WIDTH_EXTENSION" \
  --scores-file <(cat "$TMPLDIR/all_mscores" | awk '{ if($2<0.75) {print $1 " 0"} else {print $1 " 1"} }') \
  --placement-output "$TMPLDIR/mplace" \
| ./voronota write-balls-to-atoms-file \
  --pdb-output-b-factor membrane \
  --pdb-output "$TMPLDIR/statuses.pdb" \
> /dev/null


{
echo "$INFILE"
cat "$TMPLDIR/mplace" | egrep '^score ' | awk '{print $2}'
cat "$TMPLDIR/mplace" | egrep '^position ' | awk '{print $2 " " $3 " " $4}'
cat "$TMPLDIR/mplace" | egrep '^direction ' | awk '{print $2 " " $3 " " $4}'
} | tr '\n' ' '
echo

if [ -n "$OUTPUT_STATUSES_PDB" ]
then
	mkdir -p $(dirname "$OUTPUT_STATUSES_PDB")
	cp "$TMPLDIR/statuses.pdb" "$OUTPUT_STATUSES_PDB"
fi
