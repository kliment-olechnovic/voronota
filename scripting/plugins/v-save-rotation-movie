function print_help_and_exit
{
cat >&2 << 'EOF'

'v-save-rotation-movie' is a script that can be called from the 'voronota-scripting-env'
environment to generate a rotation movie from 'voronota-viewer'

Options:
    --output | -o     string   *  output file name, alternatively can be provided as an unnamed argument
    --angle | -a      number      motion step angle in degrees, default is 2
    --steps | -s      number      number of motion steps, default is 30
    --delay | -d      number      number of delay between frames, default is 2
    --circle | -c                 flag to enable complete rotation
    --help | -h                   flag to display help message and exit

EOF
exit 1
}

v-test-env || { echo >&2 "Error: 'voronota-scripting-env' environment not valid"; exit 1; }

if [ "$V_GUI" != "true" ]
then
	echo >&2 "Error: Voronota not running in GUI mode"
	exit 1
fi

OUTPUT_FILE=""
STEP_ANGLE=2
STEPS=30
DELAY=4
CIRCLE=false
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-o|--outfile)
		OUTPUT_FILE="$OPTARG"
		shift
		;;
	-a|--angle)
		STEP_ANGLE="$OPTARG"
		shift
		;;
	-s|--steps)
		STEPS="$OPTARG"
		shift
		;;
	-d|--delay)
		DELAY="$OPTARG"
		shift
		;;
	-c|--circle)
		CIRCLE=true
		;;
	-h|--help)
		HELP_MODE=true
		;;
	*)
		[ -z "$OUTPUT_FILE" ] || { echo >&2 "Error: invalid command line option '$OPTION'"; exit 1; }
		OUTPUT_FILE="$OPTION"
		;;
	esac
done

if $HELP_MODE
then
	print_help_and_exit
fi

if [ -z "$OUTPUT_FILE" ]
then
	echo >&2 "Error: missing output file path"
	exit 1
fi

if [ "$(basename "$OUTPUT_FILE")" == "$(basename "${OUTPUT_FILE}" ".mov")" ] && [ "$(basename "$OUTPUT_FILE")" == "$(basename "${OUTPUT_FILE}" ".gif")" ]
then
	OUTPUT_FILE="${OUTPUT_FILE}.mov"
fi

if [ -z "$STEPS" ] || [ "$STEPS" -lt "8" ] || [ "$STEPS" -gt "200" ]
then
	echo >&2 "Error: invalid number of steps, must be in interval from 8 to 200"
	exit 1
fi

if [ -z "$STEP_ANGLE" ] || [ "$STEP_ANGLE" -lt "1" ] || [ "$STEP_ANGLE" -gt "10" ]
then
	echo >&2 "Error: invalid step angle, must be in interval from 1 to 10"
	exit 1
fi

if [ -z "$DELAY" ] || [ "$DELAY" -lt "1" ] || [ "$DELAY" -gt "10" ]
then
	echo >&2 "Error: invalid delay, must be in interval from 1 to 10"
	exit 1
fi

command -v convert &> /dev/null || { echo >&2 "Error: 'convert' executable not in binaries path"; exit 1; }

readonly TMPLDIR=$(mktemp -d)

function on_exit_final
{
	rm -r $TMPLDIR
}

trap on_exit_final EXIT

function num_to_id
{
	echo "$1" | sed 's/^/00000/' | sed 's/.*\(....\)$/\1/'
}

STEPS="$((${STEPS}/2*2))"

if [ "$CIRCLE" != "true" ]
then
	NUM="$((${STEPS}/2+1))"
	ID="$(num_to_id "$NUM")"
	v-do-silent "screenshot $TMPLDIR/img${ID}.ppm"
	
	seq 1 "$((${STEPS}/2))" | tac \
	| while read NUM
	do
		ID="$(num_to_id "$NUM")"
		v-do-silent "rotate -axis 0 1 0 -angle -$STEP_ANGLE"
		v-do-silent "screenshot $TMPLDIR/img${ID}.ppm"
	done
	
	seq 1 "$((${STEPS}/2))" | tac \
	| while read NUM
	do
		v-do-silent "rotate -axis 0 1 0 -angle $STEP_ANGLE"
	done
	
	seq "$((${STEPS}/2+1))" "$STEPS" \
	| while read NUM
	do
		ID="$(num_to_id "$NUM")"
		v-do-silent "rotate -axis 0 1 0 -angle $STEP_ANGLE"
		v-do-silent "screenshot $TMPLDIR/img${ID}.ppm"
	done
	
	seq "$((${STEPS}/2+1))" "$STEPS" \
	| while read NUM
	do
		v-do-silent "rotate -axis 0 1 0 -angle -$STEP_ANGLE"
	done
	
	{
		yes 1 | head -5
		seq 1 "$STEPS"
		yes "$STEPS" | head -5
		seq 2 "$((${STEPS}-1))" | tac
	} | while read NUM
	do
		ID="$(num_to_id "$NUM")"
		echo "$TMPLDIR/img${ID}.ppm"
	done \
	> "$TMPLDIR/sequence"
else
	seq 0 "$STEP_ANGLE" "$((360-${STEP_ANGLE}))" \
	| while read NUM
	do
		ID="$(num_to_id "$NUM")"
		v-do-silent "screenshot $TMPLDIR/img${ID}.ppm"
		v-do-silent "rotate -axis 0 1 0 -angle $STEP_ANGLE"
		echo "$TMPLDIR/img${ID}.ppm"
	done > "$TMPLDIR/sequence"
fi

convert -delay "$DELAY" $(cat $TMPLDIR/sequence) -loop 0 "$OUTPUT_FILE"

