function print_help_and_exit
{
cat >&2 << 'EOF'

'v-fetch' is a script that can be called from the 'voronota-scripting-env'
environment to use download molecular structures from PDB

Options:
    --pdb-id | -i              string   *  PDB ID, alternatively can be provided as an unnamed argument
    --assembly-num | -a        number      assembly number, default is 1
    --nmr-num | -n             number      NMR conformer number, default is 1
    --chain | -c               string      chain name
    --help | -h                            flag to display help message and exit

EOF
exit 1
}

v-test-env || { echo >&2 "Error: 'voronota-scripting-env' environment not valid"; exit 1; }

command -v curl &> /dev/null || { echo >&2 "Error: 'curl' executable not in binaries path"; exit 1; }

PDB_ID=""
PDB_SELECTED_ASSEMBLY=1
PDB_SELECTED_CONFORMER=1
PDB_SELECTED_CHAIN=""
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-i|--pdb-id)
		PDB_ID="$OPTARG"
		shift
		;;
	-a|--assembly-num)
		ASSEMBLY_NUM="$OPTARG"
		shift
		;;
	-n|--nmr-num)
		PDB_SELECTED_CONFORMER="$OPTARG"
		shift
		;;
	-c|--chain)
		PDB_SELECTED_CHAIN="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE=true
		;;
	*)
		[ -z "$PDB_ID" ] || { echo >&2 "Error: invalid command line option '$OPTION'"; exit 1; }
		PDB_ID="$OPTION"
		;;
	esac
done

if $HELP_MODE
then
	print_help_and_exit
fi

if [ -z "$PDB_ID" ]
then
	echo >&2 "Error: missing PDB ID"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)

function on_exit_final
{
	rm -r $TMPLDIR
}

trap on_exit_final EXIT

curl "http://www.rcsb.org/pdb/rest/getEntityInfo?structureId=${PDB_ID}" > "$TMPLDIR/pdbinfo" 2> /dev/null

if [ ! -s "$TMPLDIR/pdbinfo" ]
then
	echo >&2 "Error: failed to get info for PDB ID '$PDB_ID'"
	exit 1
fi

PDB_ID_CONFIRMED="$(cat "$TMPLDIR/pdbinfo" | egrep '<PDB.*structureId' | head -1 | sed 's/.*\sstructureId\s*=\s*\"\s*\(\S\+\)\s*\".*/\1/')"

PDB_METHOD="$(cat "$TMPLDIR/pdbinfo" | egrep '<Method.*name' | head -1 | sed 's/.*\sname\s*=\s*\"\s*\(\S\+\)\s*\".*/\1/')"

PDB_ASSEMBLIES="$(cat "$TMPLDIR/pdbinfo" | egrep '<PDB.*bioAssemblies' | head -1 | sed 's/.*\sbioAssemblies\s*=\s*\"\s*\(\S\+\)\s*\".*/\1/')"

PDB_CHAINS="$(cat "$TMPLDIR/pdbinfo" \
| egrep '<Entity|<Chain|</Entity' \
| tr -d '\n' \
| sed 's|</Entity>|\n|g' \
| egrep 'type.*protein' \
| tr '>' '\n' \
| egrep '<Chain' \
| sed 's/.*\sid\s*=\s*\"\s*\(\S\+\)\s*\".*/\1/' \
| sort \
| uniq \
| tr -d '\n' \
| sed 's/\(.\+\)/\1\n/')"

if [ "$PDB_ID_CONFIRMED" != "$PDB_ID" ]
then
	echo >&2 "Error: failed to get info for PDB ID '$PDB_ID'"
	exit 1
fi

if [ -z "$PDB_SELECTED_CHAIN" ] && [ "$PDB_METHOD" == "nmr" ] && [ -z "$PDB_SELECTED_CONFORMER" ]
then
	echo >&2 "Error: no NMR conformer number provided"
	exit 1
fi

if [ -z "$PDB_SELECTED_CHAIN" ] && [ "$PDB_METHOD" != "nmr" ] && [ -z "$PDB_SELECTED_ASSEMBLY" ]
then
	echo >&2 "Error: no assembly number provided"
	exit 1
fi

mkdir -p "$TMPLDIR/models"

PDB_FILE=""
LOADING_PARAMS=""

if [ -n "$PDB_SELECTED_CHAIN" ]
then
	PDB_FILE="$TMPLDIR/models/${PDB_ID}_c${PDB_SELECTED_CHAIN}"
	
	curl "https://files.rcsb.org/download/${PDB_ID}.pdb.gz" 2> /dev/null \
	| zcat 2> /dev/null \
	| voronota get-balls-from-atoms-file --annotated --input-format pdb --include-heteroatoms --include-hydrogens 2> /dev/null \
	| voronota query-balls --match "c<${PDB_SELECTED_CHAIN}>" 2> /dev/null \
	| voronota write-balls-to-atoms-file --pdb-output "$PDB_FILE" 2> /dev/null \
	> /dev/null
else
	if [ "$PDB_METHOD" == "nmr" ]
	then
		PDB_FILE="$TMPLDIR/models/${PDB_ID}_nmr${PDB_SELECTED_CONFORMER}"
		
		curl "https://files.rcsb.org/download/${PDB_ID}.pdb.gz" 2> /dev/null \
		| zcat 2> /dev/null \
		| voronota x-split-atoms-file --prefix "$TMPLDIR/models/${PDB_ID}_nmr" 2> /dev/null \
		> /dev/null
	else
		PDB_FILE="$TMPLDIR/models/${PDB_ID}_as${PDB_SELECTED_ASSEMBLY}"
		LOADING_PARAMS="-as-assembly"
		
		curl "https://files.rcsb.org/download/${PDB_ID}.pdb${PDB_SELECTED_ASSEMBLY}.gz" 2> /dev/null \
		| zcat 2> /dev/null \
		> "$PDB_FILE"
	fi
fi

if [ -z "$PDB_FILE" ] || [ ! -s "$PDB_FILE" ]
then
	echo >&2 "Error: failed download and extract relevant atoms"
	exit 1
fi

v-do-silent "import -format pdb -file '$PDB_FILE' $LOADING_PARAMS -title '$(basename "$PDB_FILE" .pdb)'"
v-do "list-objects"

