#!/bin/bash

RESOURCE_NAME=$1

if [ -z $RESOURCE_NAME ]
then
	echo 'Need name as argument, available options are:' >&2
	echo list_of_plugins >&2
	$0 list_of_plugins >&2
fi

if [ "$RESOURCE_NAME" == "list_of_plugins" ]
then
cat << 'GLOBALEOF'
v-fetch
v-save-image
v-save-rotation-movie
v-tmalign
v-scwrl
GLOBALEOF
fi

if [ "$RESOURCE_NAME" == "v-fetch" ]
then
cat << 'GLOBALEOF'
function print_help_and_exit
{
cat >&2 << 'EOF'

'v-fetch' is a script that can be called from the 'voronota-scripting-env'
environment to use download molecular structures from PDB

Options:
    --pdb-id | -i              string   *  PDB ID, alternatively can be provided as an unnamed argument
    --assembly-num | -a        number      assembly number, default is 1
    --nmr-num | -n             number      NMR conformer number, default is 1
    --chain | -c               string      chain name
    --help | -h                            flag to display help message and exit

EOF
exit 1
}

v-test-env || { echo >&2 "Error: 'voronota-scripting-env' environment not valid"; exit 1; }

PDB_ID=""
PDB_SELECTED_ASSEMBLY=1
PDB_SELECTED_CONFORMER=1
PDB_SELECTED_CHAIN=""
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-i|--pdb-id)
		PDB_ID="$OPTARG"
		shift
		;;
	-a|--assembly-num)
		ASSEMBLY_NUM="$OPTARG"
		shift
		;;
	-n|--nmr-num)
		PDB_SELECTED_CONFORMER="$OPTARG"
		shift
		;;
	-c|--chain)
		PDB_SELECTED_CHAIN="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE=true
		;;
	*)
		[ -z "$PDB_ID" ] || { echo >&2 "Error: invalid command line option '$OPTION'"; exit 1; }
		PDB_ID="$OPTION"
		;;
	esac
done

if $HELP_MODE
then
	print_help_and_exit
fi

if [ -z "$PDB_ID" ]
then
	echo >&2 "Error: missing PDB ID"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)

function on_exit_final
{
	rm -r $TMPLDIR
}

trap on_exit_final EXIT

curl "http://www.rcsb.org/pdb/rest/getEntityInfo?structureId=${PDB_ID}" > "$TMPLDIR/pdbinfo" 2> /dev/null

if [ ! -s "$TMPLDIR/pdbinfo" ]
then
	echo >&2 "Error: failed to get info for PDB ID '$PDBID'"
	exit 1
fi

PDB_ID_CONFIRMED="$(cat "$TMPLDIR/pdbinfo" | egrep '<PDB.*structureId' | head -1 | sed 's/.*\sstructureId\s*=\s*\"\s*\(\S\+\)\s*\".*/\1/')"

PDB_METHOD="$(cat "$TMPLDIR/pdbinfo" | egrep '<Method.*name' | head -1 | sed 's/.*\sname\s*=\s*\"\s*\(\S\+\)\s*\".*/\1/')"

PDB_ASSEMBLIES="$(cat "$TMPLDIR/pdbinfo" | egrep '<PDB.*bioAssemblies' | head -1 | sed 's/.*\sbioAssemblies\s*=\s*\"\s*\(\S\+\)\s*\".*/\1/')"

PDB_CHAINS="$(cat "$TMPLDIR/pdbinfo" \
| egrep '<Entity|<Chain|</Entity' \
| tr -d '\n' \
| sed 's|</Entity>|\n|g' \
| egrep 'type.*protein' \
| tr '>' '\n' \
| egrep '<Chain' \
| sed 's/.*\sid\s*=\s*\"\s*\(\S\+\)\s*\".*/\1/' \
| sort \
| uniq \
| tr -d '\n' \
| sed 's/\(.\+\)/\1\n/')"

if [ "$PDB_ID_CONFIRMED" != "$PDB_ID" ]
then
	echo >&2 "Error: failed to get info for PDB ID '$PDBID'"
	exit 1
fi

if [ -z "$PDB_SELECTED_CHAIN" ] && [ "$PDB_METHOD" == "nmr" ] && [ -z "$PDB_SELECTED_CONFORMER" ]
then
	echo >&2 "Error: no NMR conformer number provided"
	exit 1
fi

if [ -z "$PDB_SELECTED_CHAIN" ] && [ "$PDB_METHOD" != "nmr" ] && [ -z "$PDB_SELECTED_ASSEMBLY" ]
then
	echo >&2 "Error: no assembly number provided"
	exit 1
fi

mkdir -p "$TMPLDIR/models"

PDB_FILE=""
LOADING_PARAMS=""

if [ -n "$PDB_SELECTED_CHAIN" ]
then
	PDB_FILE="$TMPLDIR/models/${PDB_ID}_c${PDB_SELECTED_CHAIN}"
	
	curl "https://files.rcsb.org/download/${PDB_ID}.pdb.gz" 2> /dev/null \
	| zcat 2> /dev/null \
	| voronota get-balls-from-atoms-file --annotated --input-format pdb --include-heteroatoms --include-hydrogens 2> /dev/null \
	| voronota query-balls --match "c<${PDB_SELECTED_CHAIN}>" 2> /dev/null \
	| voronota write-balls-to-atoms-file --pdb-output "$PDB_FILE" 2> /dev/null \
	> /dev/null
else
	if [ "$PDB_METHOD" == "nmr" ]
	then
		PDB_FILE="$TMPLDIR/models/${PDB_ID}_nmr${PDB_SELECTED_CONFORMER}"
		
		curl "https://files.rcsb.org/download/${PDB_ID}.pdb.gz" 2> /dev/null \
		| zcat 2> /dev/null \
		| voronota x-split-atoms-file --prefix "$TMPLDIR/models/${PDB_ID}_nmr" 2> /dev/null \
		> /dev/null
	else
		PDB_FILE="$TMPLDIR/models/${PDB_ID}_as${PDB_SELECTED_ASSEMBLY}"
		LOADING_PARAMS="-as-assembly"
		
		curl "https://files.rcsb.org/download/${PDB_ID}.pdb${PDB_SELECTED_ASSEMBLY}.gz" 2> /dev/null \
		| zcat 2> /dev/null \
		> "$PDB_FILE"
	fi
fi

if [ -z "$PDB_FILE" ] || [ ! -s "$PDB_FILE" ]
then
	echo >&2 "Error: failed download and extract relevant atoms"
	exit 1
fi

v-do-silent "load -format pdb -file '$PDB_FILE' $LOADING_PARAMS -title '$(basename "$PDB_FILE" .pdb)'"
v-do "list-objects"

GLOBALEOF
fi

if [ "$RESOURCE_NAME" == "v-save-image" ]
then
cat << 'GLOBALEOF'
function print_help_and_exit
{
cat >&2 << 'EOF'

'v-save-image' is a script that can be called from the 'voronota-scripting-env'
environment to save 'voronota-viewer' screenshot image

Options:
    --output | -o     string   *  output image file, alternatively can be provided as an unnamed argument
    --help | -h                   flag to display help message and exit

EOF
exit 1
}

v-test-env || { echo >&2 "Error: 'voronota-scripting-env' environment not valid"; exit 1; }

if [ "$V_GUI" != "true" ]
then
	echo >&2 "Error: Voronota not running in GUI mode"
	exit 1
fi

OUTPUT_FILE=""
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-o|--outfile)
		OUTPUT_FILE="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE=true
		;;
	*)
		[ -z "$OUTPUT_FILE" ] || { echo >&2 "Error: invalid command line option '$OPTION'"; exit 1; }
		OUTPUT_FILE="$OPTION"
		;;
	esac
done

if $HELP_MODE
then
	print_help_and_exit
fi

if [ -z "$OUTPUT_FILE" ]
then
	echo >&2 "Error: missing output file path"
	exit 1
fi

command -v convert &> /dev/null || { echo >&2 "Error: 'convert' executable not in binaries path"; exit 1; }

readonly TMPLDIR=$(mktemp -d)

function on_exit_final
{
	rm -r $TMPLDIR
}

trap on_exit_final EXIT

v-do-silent "screenshot '$TMPLDIR/image.ppm'"

if [ ! -s "$TMPLDIR/image.ppm" ]
then
	echo >&2 "Error: failed to capture screenshot"
	exit 1
fi

convert "$TMPLDIR/image.ppm" "$OUTPUT_FILE"

GLOBALEOF
fi

if [ "$RESOURCE_NAME" == "v-save-rotation-movie" ]
then
cat << 'GLOBALEOF'
function print_help_and_exit
{
cat >&2 << 'EOF'

'v-save-rotation-movie' is a script that can be called from the 'voronota-scripting-env'
environment to generate a rotation movie from 'voronota-viewer'

Options:
    --output | -o     string   *  output file name, alternatively can be provided as an unnamed argument
    --angle | -a      number      motion step angle in degrees, default is 2
    --steps | -s      number      number of motion steps, default is 30
    --delay | -d      number      number of delay between frames, default is 2
    --circle | -c                 flag to enable complete rotation
    --help | -h                   flag to display help message and exit

EOF
exit 1
}

v-test-env || { echo >&2 "Error: 'voronota-scripting-env' environment not valid"; exit 1; }

if [ "$V_GUI" != "true" ]
then
	echo >&2 "Error: Voronota not running in GUI mode"
	exit 1
fi

OUTPUT_FILE=""
STEP_ANGLE=2
STEPS=30
DELAY=4
CIRCLE=false
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-o|--outfile)
		OUTPUT_FILE="$OPTARG"
		shift
		;;
	-a|--angle)
		STEP_ANGLE="$OPTARG"
		shift
		;;
	-s|--steps)
		STEPS="$OPTARG"
		shift
		;;
	-d|--delay)
		DELAY="$OPTARG"
		shift
		;;
	-c|--circle)
		CIRCLE=true
		;;
	-h|--help)
		HELP_MODE=true
		;;
	*)
		[ -z "$OUTPUT_FILE" ] || { echo >&2 "Error: invalid command line option '$OPTION'"; exit 1; }
		OUTPUT_FILE="$OPTION"
		;;
	esac
done

if $HELP_MODE
then
	print_help_and_exit
fi

if [ -z "$OUTPUT_FILE" ]
then
	echo >&2 "Error: missing output file path"
	exit 1
fi

if [ "$(basename "$OUTPUT_FILE")" == "$(basename "${OUTPUT_FILE}" ".mov")" ] && [ "$(basename "$OUTPUT_FILE")" == "$(basename "${OUTPUT_FILE}" ".gif")" ]
then
	OUTPUT_FILE="${OUTPUT_FILE}.mov"
fi

if [ -z "$STEPS" ] || [ "$STEPS" -lt "8" ] || [ "$STEPS" -gt "200" ]
then
	echo >&2 "Error: invalid number of steps, must be in interval from 8 to 200"
	exit 1
fi

if [ -z "$STEP_ANGLE" ] || [ "$STEP_ANGLE" -lt "1" ] || [ "$STEP_ANGLE" -gt "10" ]
then
	echo >&2 "Error: invalid step angle, must be in interval from 1 to 10"
	exit 1
fi

if [ -z "$DELAY" ] || [ "$DELAY" -lt "1" ] || [ "$DELAY" -gt "10" ]
then
	echo >&2 "Error: invalid delay, must be in interval from 1 to 10"
	exit 1
fi

command -v convert &> /dev/null || { echo >&2 "Error: 'convert' executable not in binaries path"; exit 1; }

readonly TMPLDIR=$(mktemp -d)

function on_exit_final
{
	rm -r $TMPLDIR
}

trap on_exit_final EXIT

function num_to_id
{
	echo "$1" | sed 's/^/00000/' | sed 's/.*\(....\)$/\1/'
}

STEPS="$((${STEPS}/2*2))"

if [ "$CIRCLE" != "true" ]
then
	NUM="$((${STEPS}/2+1))"
	ID="$(num_to_id "$NUM")"
	v-do-silent "screenshot $TMPLDIR/img${ID}.ppm"
	
	seq 1 "$((${STEPS}/2))" | tac \
	| while read NUM
	do
		ID="$(num_to_id "$NUM")"
		v-do-silent "rotate -axis 0 1 0 -angle -$STEP_ANGLE"
		v-do-silent "screenshot $TMPLDIR/img${ID}.ppm"
	done
	
	seq 1 "$((${STEPS}/2))" | tac \
	| while read NUM
	do
		v-do-silent "rotate -axis 0 1 0 -angle $STEP_ANGLE"
	done
	
	seq "$((${STEPS}/2+1))" "$STEPS" \
	| while read NUM
	do
		ID="$(num_to_id "$NUM")"
		v-do-silent "rotate -axis 0 1 0 -angle $STEP_ANGLE"
		v-do-silent "screenshot $TMPLDIR/img${ID}.ppm"
	done
	
	seq "$((${STEPS}/2+1))" "$STEPS" \
	| while read NUM
	do
		v-do-silent "rotate -axis 0 1 0 -angle -$STEP_ANGLE"
	done
	
	{
		yes 1 | head -5
		seq 1 "$STEPS"
		yes "$STEPS" | head -5
		seq 2 "$((${STEPS}-1))" | tac
	} | while read NUM
	do
		ID="$(num_to_id "$NUM")"
		echo "$TMPLDIR/img${ID}.ppm"
	done \
	> "$TMPLDIR/sequence"
else
	seq 0 "$STEP_ANGLE" "$((360-${STEP_ANGLE}))" \
	| while read NUM
	do
		ID="$(num_to_id "$NUM")"
		v-do-silent "screenshot $TMPLDIR/img${ID}.ppm"
		v-do-silent "rotate -axis 0 1 0 -angle $STEP_ANGLE"
		echo "$TMPLDIR/img${ID}.ppm"
	done > "$TMPLDIR/sequence"
fi

convert -delay "$DELAY" $(cat $TMPLDIR/sequence) -loop 0 "$OUTPUT_FILE"

GLOBALEOF
fi

if [ "$RESOURCE_NAME" == "v-tmalign" ]
then
cat << 'GLOBALEOF'
function print_help_and_exit
{
cat >&2 << 'EOF'

'v-tmalign' is a script that can be called from the 'voronota-scripting-env'
environment to use TMalign to superpose two protein objects (model on target)

Options:
    --target | -t          string   *  target name
    --model | -m           string   *  model name
    --target-sel | -ts     string      target atoms selection expression
    --model-sel | -ms      string      model atoms selection expression
    --help | -h                        flag to display help message and exit

EOF
exit 1
}

v-test-env || { echo >&2 "Error: 'voronota-scripting-env' environment not valid"; exit 1; }

TARGET_NAME=""
MODEL_NAME=""
TARGET_SEL="[]"
MODEL_SEL="[]"
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-t|--target)
		TARGET_NAME="$OPTARG"
		shift
		;;
	-m|--model)
		MODEL_NAME="$OPTARG"
		shift
		;;
	-ts|--target-sel)
		TARGET_SEL="$OPTARG"
		shift
		;;
	-ms|--model-sel)
		MODEL_SEL="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE=true
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if $HELP_MODE
then
	print_help_and_exit
fi

if [ -z "$TARGET_NAME" ]
then
	echo >&2 "Error: missing target name"
	exit 1
fi

if [ -z "$MODEL_NAME" ]
then
	echo >&2 "Error: missing model name"
	exit 1
fi

command -v TMalign &> /dev/null || { echo >&2 "Error: 'TMalign' executable not in binaries path"; exit 1; }

v-do-silent  "list-objects '$TARGET_NAME'"

if [ "$V_TAIL_SUCCESS" != "true" ]
then
	echo >&2 "Error: no target object '$TARGET_NAME'"
	exit 1
fi

v-do-silent  "list-objects '$MODEL_NAME'"

if [ "$V_TAIL_SUCCESS" != "true" ]
then
	echo >&2 "Error: no model object '$MODEL_NAME'"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)

function on_exit_final
{
	rm -r $TMPLDIR
}

trap on_exit_final EXIT

v-do-silent  "save-atoms -on-objects '$TARGET_NAME' -use '(($TARGET_SEL) and ([-aname CA]))' -as-pdb -file '$TMPLDIR/target.pdb'"

if [ ! -s "$TMPLDIR/target.pdb" ]
then
	echo >&2 "Error: no target atoms for selection '$TARGET_SEL'"
	exit 1
fi

v-do-silent  "save-atoms -on-objects '$MODEL_NAME' -use '(($MODEL_SEL) and ([-aname CA]))' -as-pdb -file '$TMPLDIR/model.pdb'"

if [ ! -s "$TMPLDIR/model.pdb" ]
then
	echo >&2 "Error: no model atoms for selection '$MODEL_SEL'"
	exit 1
fi

TMalign "$TMPLDIR/model.pdb" "$TMPLDIR/target.pdb" -m "$TMPLDIR/matrix" > "$TMPLDIR/tmalign.out"

TMSCORE="$(cat "$TMPLDIR/tmalign.out" | egrep '^TM-score= ' | grep 'Chain_2' | sed 's/^TM-score=\s*\(\S*\)\s*.*/\1/')"

if [ -z "$TMSCORE" ] || [ ! -s "$TMPLDIR/matrix" ]
then
	echo >&2 "Error: TMalign execution failed"
	exit 1
fi

TRANSLATION=$(cat "$TMPLDIR/matrix" | head -5 | tail -3 | awk '{print $2}' | tr '\n' ' ')
ROTATION=$(cat "$TMPLDIR/matrix" | head -5 | tail -3 | awk '{print $3 " " $4 " " $5}' | tr '\n' ' ')

v-do "move-atoms -on-objects '$MODEL_NAME' -rotate-by-matrix $ROTATION -translate $TRANSLATION" >&2

if [ "$V_TAIL_SUCCESS" != "true" ]
then
	echo >&2 "Error: failed to move model atoms"
	exit 1
fi

if [ "$V_GUI" == "true" ]
then
	v-do-silent "zoom-by-atoms -on-objects '$TARGET_NAME' -use '$TARGET_SEL'"
fi

jq -n ".target=\"$TARGET_NAME\"|.model=\"$MODEL_NAME\"|.tmscore=\"$TMSCORE\""

GLOBALEOF
fi

if [ "$RESOURCE_NAME" == "v-scwrl" ]
then
cat << 'GLOBALEOF'
function print_help_and_exit
{
cat >&2 << 'EOF'

'v-scwrl' is a script that can be called from the 'voronota-scripting-env'
environment to use Scwrl4 to generate protein objects with rebuil sidechains

Options:
    --source | -s             string   *  source object name
    --destination | -d        string   *  destination object name
    --help | -h                           flag to display help message and exit

EOF
exit 1
}

v-test-env || { echo >&2 "Error: 'voronota-scripting-env' environment not valid"; exit 1; }

SOURCE_NAME=""
DESTINATION_NAME=""
HELP_MODE=false

while [[ $# > 0 ]]
do
	OPTION="$1"
	OPTARG="$2"
	shift
	case $OPTION in
	-s|--source)
		SOURCE_NAME="$OPTARG"
		shift
		;;
	-d|--destination)
		DESTINATION_NAME="$OPTARG"
		shift
		;;
	-h|--help)
		HELP_MODE=true
		;;
	*)
		echo >&2 "Error: invalid command line option '$OPTION'"
		exit 1
		;;
	esac
done

if $HELP_MODE
then
	print_help_and_exit
fi

if [ -z "$SOURCE_NAME" ]
then
	echo >&2 "Error: missing source name"
	exit 1
fi

if [ -z "$DESTINATION_NAME" ]
then
	echo >&2 "Error: missing destination name"
	exit 1
fi

command -v Scwrl4 &> /dev/null || { echo >&2 "Error: 'Scwrl4' executable not in binaries path"; exit 1; }

v-do-silent "list-objects '$SOURCE_NAME'"

if [ "$V_TAIL_SUCCESS" != "true" ]
then
	echo >&2 "Error: no source object '$SOURCE_NAME'"
	exit 1
fi

readonly TMPLDIR=$(mktemp -d)

function on_exit_final
{
	rm -r $TMPLDIR
}

trap on_exit_final EXIT

v-do-silent  "save-atoms -on-objects '$SOURCE_NAME' -use '[-aname CA,C,N,O,OXT]' -as-pdb -file '$TMPLDIR/source.pdb'"

if [ ! -s "$TMPLDIR/source.pdb" ]
then
	echo >&2 "Error: no source backbone atoms"
	exit 1
fi

Scwrl4 -h -i $TMPLDIR/source.pdb -o $TMPLDIR/destination.pdb > /dev/null

if [ ! -s "$TMPLDIR/destination.pdb" ]
then
	echo >&2 "Error: side-chain rebuilding failed"
	exit 1
fi

v-do-silent "load -file '$TMPLDIR/destination.pdb' -title '$DESTINATION_NAME'"

v-do "list-objects"
GLOBALEOF
fi
