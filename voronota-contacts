#!/bin/bash

readonly ZEROARG=$0
INFILE_PDB=""
ATOMS_QUERY_PARAMETERS=""
CONTACTS_QUERY_PARAMETERS=""
DRAWING_OUTPUT=""
DRAWING_PARAMETERS=""
CONTACTS_CACHE_DIRECTORY=""
WIREFRAME_DRAWING=false
HELP_MODE=false

while getopts "i:a:c:d:g:C:wh" OPTION
do
	case $OPTION in
	i)
		INFILE_PDB=$OPTARG
		;;
	a)
		ATOMS_QUERY_PARAMETERS="$OPTARG"
		;;
	c)
		CONTACTS_QUERY_PARAMETERS="$OPTARG"
		;;
	d)
		DRAWING_OUTPUT=$OPTARG
		;;
	g)
		DRAWING_PARAMETERS=$OPTARG
		;;
	C)
		CONTACTS_CACHE_DIRECTORY=$OPTARG
		;;
	w)
		WIREFRAME_DRAWING=true
		;;
	h)
		HELP_MODE=true
		;;
	esac
done

if [ -z "$INFILE_PDB" ] || $HELP_MODE
then
cat >&2 << EOF
Script parameters:
    -i input_file.pdb
    [-a atoms_query_parameters_string]
    [-c contacts_query_parameters_string]
    [-d drawing_for_pymol.py]
    [-g drawing_parameters_string]
    [-C cache_directory]
EOF
exit 1
fi

if [[ $ZEROARG == *"/"* ]]
then
	cd $(dirname $ZEROARG)
	export PATH=$(pwd):$PATH
	cd - &> /dev/null
fi

command -v voronota &> /dev/null || { echo >&2 "Error: 'voronota' executable not in binaries path"; exit 1; }
command -v voronota-resources &> /dev/null || { echo >&2 "Error: 'voronota-resources' executable not in binaries path"; exit 1; }

if [ ! -s "$INFILE_PDB" ]
then
	echo >&2 "Error: input file does not exist"
	exit 1
fi

readonly TMPDIR=$(mktemp -d)
trap "rm -r $TMPDIR" EXIT

cat $INFILE_PDB \
| voronota get-balls-from-atoms-file \
  --annotated \
  --radii-file <(voronota-resources radii) \
  --include-heteroatoms \
| voronota query-balls \
  --drop-altloc-indicators \
  --drop-atom-serials \
| voronota query-balls $ATOMS_QUERY_PARAMETERS \
> $TMPDIR/balls

if [ ! -s "$TMPDIR/balls" ]
then
	echo >&2 "Error: no atoms in input file"
	exit 1
fi

BALLS_MD5=""
if [ -n "$CONTACTS_CACHE_DIRECTORY" ]
then
	BALLS_MD5=$(cat $TMPDIR/balls | md5sum | awk '{print $1}')
	if [ -n "$BALLS_MD5" ] && [ -s "$CONTACTS_CACHE_DIRECTORY/$BALLS_MD5" ]
	then
		cp $CONTACTS_CACHE_DIRECTORY/$BALLS_MD5 $TMPDIR/all_contacts
	fi
fi

if [ -n "$DRAWING_OUTPUT" ] && [ -s "$TMPDIR/all_contacts" ]
then
	GRAPHICS_TOKEN=$(cat $TMPDIR/all_contacts | head -1 | awk '{print $8}')
	if [ -z "$GRAPHICS_TOKEN" ]
	then
		rm $TMPDIR/all_contacts
	fi
fi

if [ ! -s "$TMPDIR/all_contacts" ]
then
	if [ -n "$DRAWING_OUTPUT" ]
	then
		cat $TMPDIR/balls \
		| voronota calculate-contacts \
		  --annotated \
		  --draw \
		  --tag-centrality \
		| voronota query-contacts \
		  --match-min-seq-sep 1 \
		  --preserve-graphics \
		> $TMPDIR/all_contacts
	else
		cat $TMPDIR/balls \
		| voronota calculate-contacts \
		  --annotated \
		  --tag-centrality \
		| voronota query-contacts \
		  --match-min-seq-sep 1 \
		> $TMPDIR/all_contacts
	fi
	
	if [ -n "$CONTACTS_CACHE_DIRECTORY" ] && [ -n "$BALLS_MD5" ]
	then
		mkdir -p $CONTACTS_CACHE_DIRECTORY
		cp $TMPDIR/all_contacts $CONTACTS_CACHE_DIRECTORY/$BALLS_MD5
	fi
fi

if [ -n "$DRAWING_OUTPUT" ]
then
	cat $TMPDIR/all_contacts \
	| voronota query-contacts $CONTACTS_QUERY_PARAMETERS \
	  --preserve-graphics \
	> $TMPDIR/all_contacts_for_drawing
	
	if $WIREFRAME_DRAWING
	then
		cat $TMPDIR/all_contacts_for_drawing \
		| sed 's|_tfanc \S\+ \S\+ \S\+ \S\+ \S\+ \S\+|_lloop|g' \
		| sed 's|_tstrip \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+ \S\+||g' \
		> $TMPDIR/all_contacts_for_drawing_wireframe
		mv $TMPDIR/all_contacts_for_drawing_wireframe $TMPDIR/all_contacts_for_drawing
	fi
	
	cat $TMPDIR/all_contacts_for_drawing \
	| voronota draw-contacts $DRAWING_PARAMETERS \
	  --drawing-for-pymol $DRAWING_OUTPUT \
	| voronota query-contacts $CONTACTS_QUERY_PARAMETERS \
	| column -t
else
	cat $TMPDIR/all_contacts \
	| voronota query-contacts $CONTACTS_QUERY_PARAMETERS \
	| column -t
fi
